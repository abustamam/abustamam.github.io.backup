<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rasheed Bustamam Blogfolio]]></title>
  <link href="http://abustamam.github.io/atom.xml" rel="self"/>
  <link href="http://abustamam.github.io/"/>
  <updated>2015-05-05T12:42:20-07:00</updated>
  <id>http://abustamam.github.io/</id>
  <author>
    <name><![CDATA[Rasheed Bustamam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compiling OpenCV on a Mac]]></title>
    <link href="http://abustamam.github.io/blog/2015/05/03/compiling-opencv-on-a-mac/"/>
    <updated>2015-05-03T12:25:15-07:00</updated>
    <id>http://abustamam.github.io/blog/2015/05/03/compiling-opencv-on-a-mac</id>
    <content type="html"><![CDATA[<p>I’ve been helping my dad out with some OpenCV stuff.</p>

<p>I ran into so many problems trying to compile OpenCV that I’m writing a tutorial on how I compiled it on my Mac. </p>

<!-- more -->

<p>You can install OpenCV quite simply with Homebrew, using the simple command:</p>

<p><code>brew install opencv</code></p>

<p>However, most OpenCV tutorials rely on you building it yourself as the directories would then be specific to Homebrew. Plus, you don’t get to make customizations to your compilation. </p>

<p>So let’s build it ourselves! I used <a href="http://mac-opencv-projects.blogspot.com/2014/01/installing-opencv-on-mac-os-x-1091.html">this</a> tutorial, but it wasn’t sufficient, so I’m adding what worked for me.</p>

<p>Keep in mind that your mileage may vary. This is my environment: </p>

<p>Mac OS X Yosemite 10.10.2
Xcode 6.3.1 (6D1002)
OpenCV 2.4.8.0
Homebrew 0.9.5
cmake 3.1.0</p>

<p>So, first you’ll want to download the <a href="http://opencv.org/downloads.html">latest version of OpenCV</a>. I used the latest stable, which as of this writing, is 2.4.8.0. Unzip this anywhere (I put it onto my Desktop).</p>

<p><strong>Note: I’ve heard bad things happening to people who unzip OpenCV into a directory with a space in it. So, don’t do that, just in case.</strong></p>

<p>Now, for some reason the 2.4.8.0 version of OpenCV throws an error when you try to build it using Clang. So you’ll want to change one of the files to the code here: <a href="https://github.com/Itseez/opencv/commit/35f96d6da76099d80180439c857a4abe5cb17966">Fixing the LatestPoints problem</a></p>

<p>Go to the following file and replace it with the code in the above link:</p>

<p><code>[opencvdirectory]/modules/legacy/src/calibfilter.cpp</code></p>

<p>That will save you some headache (it did for me).</p>

<p>Secondly, you’ll need CMake. </p>

<p><code>brew install cmake</code> will work (that’s what I used) but if you don’t use Homebrew then just download it from the <a href="http://www.cmake.org/download/">website</a>.</p>

<p>CD into your OpenCV directory, make a <code>build</code> directory, and cd into that too.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd ~/Desktop/opencv
</span><span class="line">$ mkdir build
</span><span class="line">$ cd build</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then build and install OpenCV:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cmake -G "Unix Makefiles" ..  
</span><span class="line">$ make -j8  
</span><span class="line">$ sudo make install </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This will install to /usr/local. Keep this in mind for future reference.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frontend Nanodegree Reflections]]></title>
    <link href="http://abustamam.github.io/blog/2015/04/16/frontend-nanodegree-reflections/"/>
    <updated>2015-04-16T09:47:47-07:00</updated>
    <id>http://abustamam.github.io/blog/2015/04/16/frontend-nanodegree-reflections</id>
    <content type="html"><![CDATA[<p>Hello! I finally graduated from my Frontend Nanodegree program on Udacity. Here is a recap of my previous posts:</p>

<p><a href="http://abustamam.github.io/blog/2014/10/31/reflection-on-nanodegree-pt-1/">First reflection</a>
<a href="http://abustamam.github.io/2014/12/17/re-making-the-frogger-game/">Second reflection (Bugger)</a>
<a href="http://abustamam.github.io/2015/01/20/optimizing-a-portfolio/">Third reflection (Optimization project)</a>
<a href="http://abustamam.github.io/2015/02/08/javascript-design-patterns-reflections/">Fourth reflection (Cat Clicker)</a></p>

<p>This is my final reflection. </p>

<h2 id="the-final-project">The final project</h2>

<p>My final project was a <a href="http://abustamam.github.io/Neighborhood-Map">Neighborhood Map</a> which is an interactive map that shows Groupons near your area.</p>

<p>It was interesting and fun to make, and of course very challenging. I’d love to hear feedback, however! </p>

<p>Here’s what I learned while working through my final project.</p>

<h3 id="knockout-js-is-not-very-extensible">Knockout JS is not very extensible</h3>

<p>I like Knockout, but it isn’t very powerful. There’s no clear “model” in the MV* architecture, so you’re kinda left up a creek without a paddle. </p>

<p>However, I did like the fact that bindings worked “automatically!” But I think Angular.js also has a similar feature, and is also a bit more robust. </p>

<p>Also, the docs suck. Like, really suck. I had no idea there was something called <code>arrayForEach</code> because it’s nowhere to be found. I had to find it online, and it wasn’t even on the KnockoutJs website. (pro-tip: adding a search functionality to your docs is invaluable).</p>

<p>All-in-all, I would have enjoyed making the project more if it were with, say Angular, but the project spec required Knockout. </p>

<p>I would have liked to have used Django, but this is the “Front-End” Nanodegree, not Full-Stack. </p>

<h3 id="google-maps-api-is-crunk">Google Maps API is crunk</h3>

<p>Interestingly enough, I (again) got most of my GMAPs info from none other than Stack Overflow. When I wanted to ensure my map was dynamically resizing, it wasn’t on GMAPs, it was Stack Overflow. </p>

<p>I feel like they should have had more examples of using their API, because the list of commands and options that they made available weren’t very helpful. It’s nice to know they “existed”, but it would have also have been nice to know how they worked. </p>

<h3 id="what-to-do-when-the-docs-suck">What to do when the docs suck</h3>

<p>Two things. You can experiement (nothing’s stopping you from making a new project and testing it out in a sandbox environment) or you can just ask Stack Overflow. </p>

<p>I would recommend testing things yourself first, so that way when you do run into a problem on you can isolate the issue and concisely share what you’ve tried on Stack Overflow without the whole she-bang of your entire project. </p>

<h3 id="dont-procrastinate">Don’t procrastinate</h3>

<p>I have development hours for myself, and I would always find ways to “do” stuff during my development hours that weren’t really productive. That is to say that although I would be working on my project, I’d be doing something menial rather than solving an actual problem. In this way, I would still be working, but not really advancing my problem.</p>

<p>For example, I spent a long time on my sidebar because I didn’t want to add markers. I was putting off the adding of markers because it felt like a big task, so I did smaller tasks like edit the CSS for my sidebar. </p>

<p>The goal of making an app is to JFS (stands for Just F&amp;$%ing Ship) so not everything needs to be completely optimized. Get a MVP (minimum viable product) going and you can tweak as you go after that. Otherwise, you’re wasting time and putting off the inevitable. </p>

<h2 id="overall-review-of-the-nanodegree">Overall review of the Nanodegree</h2>

<p>Overall, I enjoyed my experience with the Nanodegree, and I would definitely consider doing the Full Stack ND, and perhaps even Data Science. For right now, I’m going to focus on a couple of other courses that I’ve purchased but put off, so check back soon for those! </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving the Singaporean Math Problem]]></title>
    <link href="http://abustamam.github.io/blog/2015/04/16/solving-the-singaporean-math-problem/"/>
    <updated>2015-04-16T09:04:38-07:00</updated>
    <id>http://abustamam.github.io/blog/2015/04/16/solving-the-singaporean-math-problem</id>
    <content type="html"><![CDATA[<p>Trending today seems to be problem number 24 of a <a href="http://www.cnn.com/2015/04/15/living/feat-cheryl-birthday-math-problem-goes-viral/">Singaporean Math Olympiad test</a>. Let’s not get bogged down why suddenly the Internet is clamouring over solving a seemingly impossible math problem, but since everyone wants to figure out the answer, let’s go through how to get it.</p>

<p>Disclaimer: I have not consulted any outside sources to verify my answer, but I’m fairly certain my logic is sound.</p>

<!-- more -->

<h2 id="the-problem">The problem</h2>

<p>The problem is straightforward. Albert and Bernard just met a girl named Cheryl. They want to know her birthday. Unfortunately, Cheryl is either a troll or is just a troubled soul (tr-oul?) and decides to make them earn that knowledge.</p>

<p>She gives them a list of possibilities of when her birthday will be:</p>

<ul>
  <li>May 15</li>
  <li>May 16</li>
  <li>May 19</li>
  <li>June 17</li>
  <li>June 18</li>
  <li>July 14</li>
  <li>July 16</li>
  <li>August 14</li>
  <li>August 15</li>
  <li>August 17</li>
</ul>

<p>Then, since that clearly isn’t enough, she tells Albert the month of her birthday, and she tells Bernard the day of her birthday. </p>

<p>At this point, any normal human being would have just told the other dude what Cheryl told them, but not Albert and Bernard! </p>

<p>They conversed briefly:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Albert: I don't know when Cheryl's birthday is, but I know that Bernard does not know too [sic].
</span><span class="line">Bernard: At first I don't [sic] know when Cheryl's birthday is, but I know now.
</span><span class="line">Albert: Then I also know when Cheryl's birthday is.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Okay, is that confusing enough for you? </p>

<p>Let’s break the problem down. </p>

<h2 id="the-solution">The solution</h2>

<p>The key is not to solve the problem yourself, but to look at it from the lenses of Albert and Bernard. </p>

<p>Let’s look at the conversation between Albert and Bernard. Albert is given X month, Bernard is given Y day.</p>

<p>Since Albert only knows the month, any month with more than one date listed is an uncertainty. This part was obvious. What isn’t obvious is the implication of Albert knowing that Bernard does not know when Cheryl’s birthday is. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Albert: I don't know when Cheryl's birthday is, but I know that Bernard does not know too [sic].</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>How could Albert know for sure that Bernard doesn’t know, despite not knowing what Bernard knows?</p>

<p>The answer is that ALL the listed dates within Albert’s month MUST be duplicates. </p>

<p>Why? Well, let’s say Bernard had the 18th. Right at the onset, Bernard would know the month, since there is only one month with the 18th (June). Same with the 19th. So we know that Bernard got neither the 18th nor the 19th. </p>

<p>Now, Albert KNOWS that Bernard does not know when her birthday is. By extension, this means that Albert knows that Bernard got a number that was a duplicate. </p>

<p>How can Albert know for sure that Bernard’s number was a duplicate? Because all of the numbers in Albert’s month were duplicates. </p>

<p>This means we can safely rule out May and June, as both of those months have a singleton date (19 and 18 respectively).</p>

<p>So by the first statement, we’ve ruled out May and June, and are left with the following…</p>

<ul>
  <li>July 14</li>
  <li>July 16</li>
  <li>August 14</li>
  <li>August 15</li>
  <li>August 17</li>
</ul>

<p>Okay, let’s analyze Bernard’s statement.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Bernard: At first I don't [sic] know when Cheryl's birthday is, but I know now.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s say, for argument’s sake, that Bernard was given 14. Would he be able to discern the month? The answer is no, since July and August both have 14. This means that Bernard’s number must be 15, 16, or 17. </p>

<p>Now, if he got 15 or 17, then he knows the month must be August. If he got 16, he knows the month must be July.</p>

<p>So, simply by Albert saying that he knows Bernard doesn’t know Cheryl’s birthday, Bernard’s number makes it obvious to Bernard what the birthday is. We still don’t know, however. <em>And neither does Albert</em>, which is a key point I’ll come to in a second.</p>

<p>So we’ve ruled out July 14 and August 14. Let’s keep going.</p>

<ul>
  <li>July 16</li>
  <li>August 15</li>
  <li>August 17</li>
</ul>

<p>Finally, the last statement, and the answer you’ve been waiting for. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Albert: Then I also know when Cheryl's birthday is.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Remember, Albert knows the month, but not the day. If Albert now knows Cheryl’s birthday, we can safely rule out August because he still wouldn’t have enough information (since there’s 15 and 17). </p>

<p>Therefore, the final answer is…</p>

<h1 id="july-16">July 16</h1>

<p>Hope you had fun. Feel free to reach out at rasheed.bustamam@gmail.com if you have any questions or need any clarifications. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Design Patterns Reflections]]></title>
    <link href="http://abustamam.github.io/blog/2015/02/08/javascript-design-patterns-reflections/"/>
    <updated>2015-02-08T16:14:46-08:00</updated>
    <id>http://abustamam.github.io/blog/2015/02/08/javascript-design-patterns-reflections</id>
    <content type="html"><![CDATA[<h1 id="rundown">Rundown</h1>

<p>This course focuses on Javascript design patterns. It takes us through several simple projects for the sake of learning good design patterns. I will post my brief reflections of each project here. </p>

<!-- more -->

<h1 id="cat-clicker">Cat Clicker</h1>

<p><a href="http://abustamam.github.io/Cat-Clicker">Cat Clicker</a> was my first project. </p>

<h2 id="version-01">version 0.1</h2>

<p>Has one single cat. It was very easy to set up, just getting the structure of the HTML page I need to get used to. </p>

<p>I feel pretty good about my code, even though it’s not “beautiful.”</p>

<p>I clicked my cat probably 10 times to test functionality. </p>

<h2 id="version-02">version 0.2</h2>

<p>Since the HTML skeleton is already available for me, I merely dumped both cats into a <code>#cats div</code> and added a class for each cat. </p>

<p>I still feel good about my code, though it’s still not beautiful. </p>

<p>Clicked probably another 10 times to test functionality. </p>

<h2 id="version-03">version 0.3</h2>

<p>Finally, I added 5 cats, and each cat has its own click-counter. </p>

<p>It took WAY too long for me to figure out how to do it, but using classes seemed to be the way to go. Now, as long as I have the pics, I am able to add as many cats as I want!</p>

<h2 id="version-04">version 0.4</h2>

<p>Using MVO, I was able to abstract my code to separate concerns. However, in simplifying my Model, I introduced a bug (which I will fix)…</p>

<ul>
  <li>
    <p>When opening app for the first time and clicking on kitten 0 a few times, switching to one kitten then back to kitten 0 resets kitten 0 back to 0 clicks, first time only. Cause is likely currentCat.</p>
  </li>
  <li>
    <p>When clicking reset button, and switching to another cat that has clicks (without refreshing), cat will still display its old number of clicks. A refresh will fix this. Cause is likely the fact that switching cats uses a copy of currentCat, and the copy’s clicks are not reset. Since the scope of the cat copy is limited to the IIFE, I will try to determine a workaround. </p>
  </li>
</ul>

<h2 id="version-04b">version 0.4b</h2>

<p>Bugfix: all kitten data are synced with local storage (saves on each click)
Bugfix: Reset button works properly</p>

<h2 id="version-05">version 0.5</h2>

<p>Add admin panel, which allows “cheating” (aka changing number of clicks)</p>

<h2 id="version-1">version 1</h2>

<p>Uses knockout.js, looks cool</p>

<h1 id="school-attendance-app">School-Attendance App</h1>

<p>Original Udacity repo is <a href="https://github.com/udacity/ud989-school-attendance">here</a>. My repo is <a href="https://github.com/abustamam/school-attendance">here</a>.</p>

<p>The goal of this app is to refactor existing code from spaghetti code into maintainable code using MVO, which was done pretty easily. The model was the list of students and the days they missed. The view was how the app looks. And the octopus was what bound everything together. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing a Portfolio]]></title>
    <link href="http://abustamam.github.io/blog/2015/01/20/optimizing-a-portfolio/"/>
    <updated>2015-01-20T11:50:41-08:00</updated>
    <id>http://abustamam.github.io/blog/2015/01/20/optimizing-a-portfolio</id>
    <content type="html"><![CDATA[<h1 id="heres-the-latest">Here’s the latest</h1>

<p>The latest project was to optimize a portfolio. Once I get the project graded, I will update the <a href="http://abustamam.github.io/mobile-portfolio">portfolio</a> to be my own. However, here are some take-home points I got.</p>

<!-- more -->

<h2 id="the-course">The course</h2>

<p><a href="https://www.udacity.com/course/viewer#!/c-ud884-nd">The course</a> itself wasn’t bad. However, it definitely wasn’t interesting. </p>

<p>The course focused on the Critical Rendering Path (CRP) and how to optimize it. However, I felt it didn’t go into specifics, like how to optimize above-the-fold CSS. I had to look at resources elsewhere to learn what that was. </p>

<p>Aside from all that, I did learn a lot from the course, but I feel I learned more from the <a href="https://developers.google.com/web/fundamentals/">Google web fundamentals</a> guide (incidentally, written by one of the lecturers in the course!).</p>

<h2 id="the-project">The project</h2>

<p>The project was to optimize <a href="github.com/udacity/frontend-nanodegree-mobile-portfolio">this portfolio</a> in two primary ways.</p>

<p>The first goal was to optimize the website such that it got a score of 90+ on <a href="https://developers.google.com/speed/pagespeed/insights/?url=abustamam.github.io%2Fmobile-portfolio">Page Speed Insights</a>. This was done by analyzing the CRP and performing optimizations such as inlining critical CSS and async-ing non-critical scripts. </p>

<p>The second goal was to optimize the <a href="mobile-portfolio/pizza.html">pizza page</a> such that it ran at 60 FPS. This was done by performing several JavaScript optimizations.</p>

<p>The main issue I ran into with the project was the task automaters (more on this <a href="#gulp">below</a>).</p>

<p>The project itself was pretty simple. In fact, though I thought the project would be incredibly boring (make one change, measure, make another change, measure) it certainly wasn’t that. </p>

<p>Granted, I did need to measure the results of each change I made, but it wasn’t terrible. In fact, my task-runner did most of the work for me. I just made sure that all my tasks were written correctly. </p>

<p>The second part of the project was optimizing the JavaScript.</p>

<p>The tough part about this was that I didn’t know too much about requestAnimationFrame. So I learned! And that’s what life is all about. So I learned about the rAF, and used it to optimize my JavaScript.</p>

<p>Also, I moved variable declarations outside of functions/for loops, if the variables were constant throughout. For example, there will always be x number of pizzas, so why not push that into a variable and iterate over that array? Fewer calculations = better performance.</p>

<h2 id="using-gulpjs">Using Gulp.js</h2>

<p>I must admit, I started using Grunt first. Then I learned about Gulp and decided to try it out. </p>

<p>Both of them looked incredibly complicated, but as I played around with them I learned a lot about them, and also about node.js. Though they seemed complicated, they really weren’t. </p>

<p>Since I ended up using Gulp, I won’t talk about Grunt. </p>

<p>With Gulp, all you do is pipe streams of data around. You start with a source, and then you perform a ‘task’ on it, and you can do whatever you want with the result of that task (even perform another task on it).</p>

<p>When you write your own tasks, you can add task dependencies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gulp.task('one', function(){
</span><span class="line">  // do something
</span><span class="line">});
</span><span class="line">
</span><span class="line">gulp.task('two', ['one'], function(){
</span><span class="line">  // do another thing
</span><span class="line">});
</span><span class="line">
</span><span class="line">gulp.task('three', ['one'], function(){
</span><span class="line">  // do something else
</span><span class="line">});
</span><span class="line">
</span><span class="line">gulp.task('default', ['two', 'three']);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above code has a default task <code>default</code>, which depends on ‘two’ and ‘three’. Since both of them depend on ‘one’, ‘one’ must finish before ‘two’ or ‘three’ begin. However, even though both of them depend on ‘one’, ‘one’ is only run once. Neat huh? </p>

<p>I used this to ‘clean’ before minification. Each minification task depended on <code>clean</code>, which was run before any minification task. So my bulk-minification task <code>minify</code> ran clean before running any single minification task. Very handy! </p>

<p>Now, back to the issues I ran into.</p>

<p><a name="gulp"></a>
### Imagemin images can’t be huge</p>

<p>The first main issue was with <code>imagemin</code> which is a great tool, but there was a weird problem.</p>

<p>It was failing with a strange error. </p>

<p>So I did some trial and error by removing certain files, and I found out that it didn’t fail when I took out the huge ‘pizzaria’ image file. </p>

<p>I surmised this was because the pizzaria image file was so big, it killed imagemin. So I deleted it, and this worked fine. </p>

<p>So that brings me to a lesson learned–sometimes you have to do trial-and-error to figure out what’s going wrong. </p>

<h3 id="dont-forget-to-change-sources">Don’t forget to change sources!</h3>

<p>To simplify my app, I moved all html files to the base (build), and all assets into their respective folders (i.e. img, css, js). I was running into so many errors when I was trying to optimize my pizza page.</p>

<p>It turns out that it was calling the wrong css file! </p>

<p>So if you’re going to restructure your app’s directory, make sure that you double check each page’s resources! </p>

<h2 id="moral-of-the-story">Moral of the story</h2>

<p>I learned a lot in this project, namely for task automation. Gulp is definitely a godsend when it comes to optimization, so I was happy to learn it. It took a while, but I finally got it down, and it was awesome! </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Re)making the Frogger Game]]></title>
    <link href="http://abustamam.github.io/blog/2014/12/17/re-making-the-frogger-game/"/>
    <updated>2014-12-17T13:40:50-08:00</updated>
    <id>http://abustamam.github.io/blog/2014/12/17/re-making-the-frogger-game</id>
    <content type="html"><![CDATA[<h1 id="six-weeks-later">Six weeks later</h1>

<p>I’m back, and I’ve finally finished my game project, using HTML5 Canvas and JS. You can view the finished project <a href="http://abustamam.github.io/bugger">here</a>. </p>

<!-- more -->

<p>The courses used were <a href="https://www.udacity.com/course/viewer#!/c-ud292-nd">HTML5 Canvas</a> and <a href="https://www.udacity.com/course/viewer#!/c-ud015-nd">Object-oriented Javascript</a>.</p>

<p>I learned a lot while working through this project. Not only about programming, but also about motivation and getting things done. </p>

<h2 id="when-youre-stuck">When you’re stuck…</h2>

<p>I learned that when you’re stuck, just go with your “gut feeling” and see if it works. If it doesn’t work, check the errors, and see if you can fix what you broke. </p>

<p>Always always <em>always</em> work one change at a time if you’re “stuck,” unless of course you’re confident what you’re doing is going to work. Here’s an example…</p>

<p>At one point, I decided I wanted to add a character selection screen. Up until this point, the canvas was only drawing the main game. In order to add a character selection screen, I needed to add a new “screen.” To this effect, I decided to add a “game state” to the game, so that way the engine could track the state of the game and render appropriate content for its state. </p>

<p>Once I did that, I worked the start screen piece by piece. I started by drawing one character, then the Selector, and then I added more characters. Then I added the logic to the Selector class, and ensured that the Selector responded in the way I wanted it to. Then I ensured the Selector was passing in the chosen character data to the main game, so that it could render the correct character. </p>

<p>** Bug: Notice that when you choose one of the heroines on the right side, they start on the right side instead of in the middle. I am working on a fix for this. </p>

<p>I like to imagine development like Lego. You have a plethora of commands and methods at your disposal, you need to use your imagination and iteratively build upwards, until you get what you need. </p>

<h2 id="designing-your-code">Designing your code</h2>

<p>When you use function declarations…</p>

<p>function () {}</p>

<p>vs </p>

<p>var fn = function () {}</p>

<p>…Javascript does something known as “hoisting.” Function declarations are loaded <em>first</em>, so the order doesn’t really matter. </p>

<p>However, they <em>do</em> matter to you. When you’re looking for something that broke, or want to tweak something, you’ll want to find it quickly. So it’s important to have everything organized in a logical sense, using comments when necessary. As tempted as I was to haphazardly place prototypical functions wherever I wanted to, I made sure that the prototypical functions were neatly organized beneath their respective classes. Perhaps it was my OCD, but it made it immensely easy for me to find everything. </p>

<p>It also makes it easy for you to keep code in your head. </p>

<h2 id="mustering-motivation">Mustering motivation</h2>

<p>I’ve had the opportunity to work a lot of hours during this project. There were also a lot of family visits, and I managed to get sick twice. That made my motivation to code shot. </p>

<p>How did I get past humps? </p>

<p>First, I made a clean workstation. A workstation that is organized allows for an organized mind and thought process. I moved my desk around so it makes me feel like I’m in an office, so I’m tempted to work as if I were in an office. </p>

<p>Second, I made a list (mental or otherwise) of things I wanted to accomplish. What was my task for today? Was it to add collision detection? Was it to add winning conditions? Was it to add a start/game-over screen? I’d choose one task and hack at it. </p>

<p>Third, when I felt like I had momentum (or “flow”), I’d stop. This is effective because it allows for your brain to relax (e.g. not think about the problem at hand). The next day, I’d be motivated to pick back up where I started and continue my momentum.</p>

<p>Contrast this with following through with momentum. If the first task to do the next session is difficult, it’ll be hard to motivate yourself to do it. So if you make finishing the task easy and push it to the start of the next session, you’ll continue your momentum and be able to drive through the difficult task more easily. </p>

<p>And finally, no workstation is complete without a kitten on your lap.</p>

<h2 id="whats-next">What’s next?</h2>

<p>My next project is to learn website optimization. I’ll of course post my results of the next project when I’m done. </p>

<p>Til next time! </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection on Nanodegree Pt 1]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/31/reflection-on-nanodegree-pt-1/"/>
    <updated>2014-10-31T23:23:45-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/31/reflection-on-nanodegree-pt-1</id>
    <content type="html"><![CDATA[<h2 id="udacity-nanodegree-overview">Udacity Nanodegree overview</h2>

<p>I’ve been plowing through <a href="https://www.udacity.com/course/nd001">Udacity’s Front-End Nanodegree program</a>. It’s a pilot program, designed to learn front-end web development from the ground up.</p>

<!-- more -->

<p>I started the day I was allowed to, which was about two weeks ago. </p>

<p>So far, I’ve completed the <a href="http://abustamam.github.io/rbport">Mockup to Website</a>, and <a href="http://abustamam.github.io/resume">Interactive Resume</a>. </p>

<p>The courses are decent; I enjoy the byte-sized lectures interspersed with quizzes. The courses don’t go too deep, but that’s what the projects are for.</p>

<p>What you really get for the Nanodegree tuition is access to mentors and of course the certification. Since all of the coursework required to complete the projects is technically free on Udacity (which is really awesome of them!), we’re really just paying for the service of mentorship.</p>

<p>What I’ve come to realize is that many people lack mentors in life. They follow a pre-determined career path that includes university and internship, and they have a college advisor, but many times the advisor has not gone through the same path. Also, the advisor is not heavily emphasized, which I feel is a big mistake. </p>

<p>The best thing a student can have is a mentor, not only for the knowledge, but also the connections.</p>

<p>Given all of that, is Udacity worth the $200 a month? Well, I’m scheduled for my first 1-on-1 mentorship session next week, so only time will tell. </p>

<p>As I go through the program, I will continue posting updates and reflections about the program. </p>

<h2 id="the-actual-coursework">The actual coursework</h2>

<h3 id="project-1-mockup-to-website">Project 1: Mockup to Website</h3>

<p>The first course I took in the Nanodegree program was <a href="https://www.udacity.com/course/viewer#!/c-ud304">Intro to HTML and CSS</a>. This was billed to be “Not your average HTML and CSS course,” which I found to be interesting. I’ve taken countless HTML and CSS courses online, and most of them tend to be pretty much the same. They’re all good, but at the end, I couldn’t do much by myself. </p>

<p>By the end of the Udacity course, I was able to go from PDF mockup to website from scratch. It’s all an iterative process, which no other HTML course had ever told me. </p>

<p>Most other courses focused on syntax, which of course is important, but always left out design. Rather than having us create the site, they tell us what the numbers are, and we simply translate that to syntax. </p>

<p>Udacity ensured that we could do everything on our own, which is the definition of mastery. </p>

<p>So was it your average HTML and CSS course? No, definitely not. And since the course is free (remember, you pay for mentorship, not knowledge), I definitely recommend anyone new to web development to take this course.</p>

<p>As an aside, I really love the informal nature of the classes. I hate classes that take themselves too seriously. Learning shouldn’t be boring. Why shouldn’t the instructor throw random round objects at another instructor? </p>

<p>Granted, learning should be taken seriously, but it doesn’t need to be serious to be taken seriously. Having fun is important too, and nothing says we can’t have both!</p>

<h3 id="mini-project-learn-github">Mini-project: Learn Github</h3>

<p>What I like about the Nanodegree program so far is that it focuses on career development. So rather than just learning random skills, the skills you learn are actually organized in a way that increases job-readiness. And it’s no secret that version control is pretty much a requirement for any software-related job. </p>

<p>I’ve taken a couple of Github crash courses, and some other courses I’ve taken included at least one or two lessons on “gitting” started with Git, but I still always found myself completely lost when using version control. Not only that, but I learned syntax and commands, but not why I should do what. I didn’t know the difference between committing and pushing, nor when to commit. </p>

<p><a href="https://www.udacity.com/course/ud775">How to Use Git and Github</a> is a wonderful course that starts from ground up. Rather than immediately pushing students into the Github environment, it introduces Git as a software, and the first part of the course is dedicated to explaining what Git is, and how to use it. </p>

<p>I really liked that part because then I realized how many more applications Git could have other than software developemnt. For example, you could use it to keep track of important files locally, or you could “version control” a novel or something similar. </p>

<p>After that, the course delves into your very first Github repository, and then we get into collaboration with Github.</p>

<p>What made the course especially unique was the fact that we were required to do “reflections.” These were basically little thoughts that made us think about what we were actually learning, and why we were learning it, which I found incredibly effective. </p>

<p>You can read my reflections <a href="https://github.com/abustamam/reflections">here</a>. </p>

<p>All in all, I learned a lot from the course, and I recommend it to anyone who is new to Git(Hub).</p>

<h3 id="project-2-interactive-resume">Project 2: Interactive Resume</h3>

<p>The natural follow-up to learning HTML/CSS is JavaScript. HTML is how things are laid on the page, CSS is how things are shown on the page, and JavaScript makes all of that non-static. </p>

<p>I wouldn’t consider JavaScript a “beginner” language, since most “beginner” languages have the concept of classes, which JavaScript doesn’t technically have. Python seems to be the go-to beginner language, which is probably why it’s recommended to take the Python courses before moving on with the JavaScript course. </p>

<p>Regardless, the next project is the Interactive Resume. When I saw the project title “Interactive Resume,” I read it to be a resume that the user could interact with. Instead, it’s a normal resume whose content comes from JSON, which is fine, it just doesn’t seem very interactive. </p>

<p>All that aside, the course for this is <a href="https://www.udacity.com/course/viewer#!/c-ud804">JavaScript Basics</a>. </p>

<p>Out of the few courses I’ve completed at Udacity, JS Basics is probably the worst (even though it’s pretty good). All of the courses I’ve taken with Udacity have been pretty good thus far, but there has to be one worst, and JS Basics takes the cake. </p>

<p>Why? The course is confusing. We learn the project goal. And we begin constructing it. Then for no well-defined reason, we’re told to erase all the lines of code we wrote and start fresh.</p>

<p>I’m all for starting fresh, but then it goes from a blank slate to a half-full resume from one video to the next, and following along with the video would not result in the “this is how your site should look now” shown. I had to do a lot of things myself to make it look how it was supposed to, but nowhere that was mentioned. </p>

<p>Other than that caveat, the course is pretty good. It teaches the syntax and the basics of JSON, which is something that very few JS courses ever teach.</p>

<p>Though JS Basics is a good course, I would recommend Codecademy over Udacity for learning JavaScript Basics. Only after that would I take this course. </p>

<h2 id="wrap-up">Wrap-up</h2>

<p>That about wraps up my first couple weeks in the Nanodegree program. I’ll be back with another update once I finish my game project!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 22: Topoi Challenge]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/22/day-22-topoi-challenge/"/>
    <updated>2014-10-22T23:05:47-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/22/day-22-topoi-challenge</id>
    <content type="html"><![CDATA[<p><strong>Day 22: Reach back into your Topoi from these past few days, pick a topic to address, and write!</strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 21: Geothe's Walking Stick Pt 5]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/21/day-21-geothes-walking-stick-pt-5/"/>
    <updated>2014-10-21T23:04:48-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/21/day-21-geothes-walking-stick-pt-5</id>
    <content type="html"><![CDATA[<p><strong>Day 21: Again today, for the final Topoi day, return to your past writing and Goethe’s Walking Stick…(See description)</strong></p>

<p><em>Again today, for the final Topoi day, return to your past writing and Goethe’s Walking Stick and ideas you’ve developed so far in the Topoi: who you are, what you want our of your writing, whom you hope to speak to, the ideas you’ve written down in your Goethe’s Walking Stick, and the questions you’ve asked. Find more concepts and ideas you’re interested in writing about. Then… - Work those ideas through your own Topoi, asking questions today about Values. - Write down as many questions as you can think of that belong to Values. - Choose one question to address today, one you think is truly, terribly, wonderfully interesting, interesting enough to captivate an audience you hope to speak to. - Finally, address that question.</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 20: Goethe's Walking Stick Pt 4]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/20/day-20-goethes-walking-stick-pt-4/"/>
    <updated>2014-10-20T23:03:50-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/20/day-20-goethes-walking-stick-pt-4</id>
    <content type="html"><![CDATA[<p><strong>Day 20: Again today, return to your first week of writing, to your Goethe’s Walking Stick… (See description.)</strong></p>

<p><em>Again today, return to your first week of writing, to your Goethe’s Walking Stick, and to the ideas you’ve developed so far in the Topoi. Page through the ideas there: who you are, what you want our of your writing, whom you hope to speak to, the ideas you’ve written down in your Goethe’s Walking Stick, the questions you’ve asked. Find more concepts and ideas you’re interested in writing about. Then… - Work those ideas through your own Topoi, asking questions today about Form &amp; Structure. - Write down as many questions as you can think of that belong to Form &amp; Structure. - Choose one question to address today, one you think is truly, terribly, wonderfully interesting, interesting enough to captivate an audience you hope to speak to. - Finally, address that question.</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 19: Goethe's Walking Stick Pt 3]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/19/day-19-goethes-walking-stick-pt-3/"/>
    <updated>2014-10-19T23:02:46-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/19/day-19-goethes-walking-stick-pt-3</id>
    <content type="html"><![CDATA[<p><strong>Day 20: Again today, return to your first week of writing, to your Goethe’s Walking Stick… (See description.)</strong></p>

<p><em>Again today, return to your first week of writing, to your Goethe’s Walking Stick, and to the ideas you’ve developed so far in the Topoi. Page through the ideas there: who you are, what you want our of your writing, whom you hope to speak to, the ideas you’ve written down in your Goethe’s Walking Stick, the questions you’ve asked. Find more concepts and ideas you’re interested in writing about. Then… - Work those ideas through your own Topoi, asking questions today about Form &amp; Structure. - Write down as many questions as you can think of that belong to Form &amp; Structure. - Choose one question to address today, one you think is truly, terribly, wonderfully interesting, interesting enough to captivate an audience you hope to speak to. - Finally, address that question.</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 18: Goethe's Walking Stick Pt 2]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/18/day-18-goethes-walking-stick-pt-2/"/>
    <updated>2014-10-18T23:01:19-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/18/day-18-goethes-walking-stick-pt-2</id>
    <content type="html"><![CDATA[<p><strong>Day 18: Again today, return to your first week of writing and to your Goethe’s Walking Stick. (See description.)</strong></p>

<p><em>Again today, return to your first week of writing and to your Goethe’s Walking Stick. Page through the ideas there: who you are, what you want our of your writing, whom you hope to speak to, the ideas you’ve written down in your Goethe’s Walking Stick, etc. Find concepts and ideas you’re interested in writing about. Then…   - Work those ideas through your own Topoi, asking questions today about Change.  - Write down as many questions as you can think of that belong to Change.  - Choose one question to address today, one you think is truly, terribly, wonderfully interesting, interesting enough to captivate an audience you hope to speak to.  - Finally, address that question.</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 17: Goethe's Walking Stick]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/17/day-17-goethes-walking-stick/"/>
    <updated>2014-10-17T22:59:48-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/17/day-17-goethes-walking-stick</id>
    <content type="html"><![CDATA[<p><strong>Day 17: Go back to your first week of writing and to your Goethe’s Walking Stick. (See description.)</strong></p>

<p><em>Go back to your first week of writing and to your Goethe’s Walking Stick. Page through the ideas there: who you are, what you want our of your writing, whom you hope to speak to, the ideas you’ve written down in your Goethe’s Walking Stick, etc. Find some concepts and ideas you’re interested in writing about. Then… - Work those ideas through your own Topoi (Topics), asking questions today about Causes &amp; Effects.  - Write down as many questions as you can think of that belong to Causes &amp; Effects.  - Choose one question to address today, one you think is truly, terribly, wonderfully interesting, interesting enough to captivate an audience you hope to speak to.  - Finally, address that question.</em></p>

<!-- more -->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 16: Story]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/16/story/"/>
    <updated>2014-10-16T22:57:41-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/16/story</id>
    <content type="html"><![CDATA[<p><strong>Day 16: Write about anything. Tell the story of a day, or of years…(See description for details.)</strong></p>

<p><em>Write about anything. Tell the story of a day, or of years, or of a failed diet, or of an awesome road trip, or of someone else entirely. Maybe go somewhere you like to go (a coffee shop, a park, the beach, the lot behind 7-11) to describe it. Just use the right verbs while you write: remain mindful of how often you use “to be” verbs (am, is, are, was, were, be, being, been), and instead choose the right metaphor-verbs in every poem-of-a-sentence.</em></p>

<h2 id="important-note">Important note</h2>

<p><em>The following piece is fictional. Please don’t send me condolence letters. Thanks :)</em> </p>

<p>“Sticks and stones may break my bones but words will never hurt me.” Such is the mantra of kids who get bullied and need a way to combat the bullies. But the broken bones I had were much easier to bear than the words I heard on the evening of my 21st birthday.</p>

<p>He was driving me to what I had figured to be my surprise birthday party, having a good laugh. Then when we crossed Main Street, the world turned upside down. </p>

<p>I remember that moment clearly. One moment we’re laughing; the next moment, we’re spinning. Everything happened as if time had slowed down. The airbags popped out and Gerry’s head bounced off the bag before hitting the window, and my own head hit the bag and lurched sideways. The entire world spun around me as the other car pushed ours. </p>

<p>My neck hurt, but I felt fine. I looked at the shattered window, and then at Gerry, whose head was resting against the window. After struggling with my airbag, I managed to shake his shoulder and shout his name. He did not respond. I shook his shoudler again, shouting more loudly. He did not respond. I fumbled with my seatbelt then burst out of the door, stumbling onto the pavement. I looked at one bystander and yelled at him to call 911. He retrieved his phone and dialed immediately. </p>

<p>I limped to the car that hit us. Through the broken window I could see the driver, who did not seem to be awake. I tried to open the door from the outside but it was locked. I reached into the car and shook the man’s shoulder to see if he would wake up. Shouting accomplished nothing. </p>

<p>Another bystander approached me, asking me if I was okay. I told her I felt fine but that my boyfriend was in the car, locked in because the other car had hit his door. She put her arm around me and tried to comfort me. I coudn’t pay attention to what she was saying because I was in such a daze. I couldn’t believe this was happening. </p>

<p>When the ambulance finally arrived, I was in hysterics. I told them that my boyfriend was trapped in the car, unconscious. The medics told me to calm down and that they needed to check me for wounds. It took two men to hoist me onto the stretcher and restrain me. I demanded that they tend to my boyfriend first, but they insisted on taking care of me. </p>

<p>They wheeled me into the ambulance and I can’t remember what happened after they put the respirator on me. </p>

<hr />

<p>After an hour in the hospital, I was told that as a result of the crash, I had broken two ribs and required 9 stitches on my face from the shards of glass slashing me. I didn’t care about any of that. I asked the doctors and nurses what happened to Gerry. They all hesitated and said they didn’t know, but that they would get someone who did know to tell me. </p>

<p>Finally, one doctor sat at the foot of my bed, looked at me, and sighed. Then he uttered three words that made my broken bones seem painless. </p>

<p>“Gerry is dead.”</p>

<p>Sadness overcame me and my eyes welled up with tears. I told myself it wasn’t possible. That Gerry was in the next room, recovering just like I was. I told myself that we would emerge from the hospital together, broken, but together. I told myself that I would be able to come home and see his smiling face, and feel his warm embrace. </p>

<p>But the void in my heart told me that none of that was true. He was not recovering. We would not emerge from the hospital together. And he would never again be able to wrap me in his arms. I knew the truth. Gerry was dead. </p>

<p>I thought it was my fault. If I hadn’t chosen to have my surprise birthday party on that day, none of this would have happened. If I had chosen to drive, perhaps I could have seen the car coming towards us and stop. If I had decided to have a small, intimate celebration with Gerry, then we wouldn’t have to be on the road at all. </p>

<p>Despite all the self-blame, I knew that there’s nothing I could do then to bring him back. Yet I wished I was able to say goodbye properly. I wished I could have savored that last hug for just five more seconds. I wished I didn’t say those mean things to him the previous week. So many regrets, but nothing I could do to come to terms with them. </p>

<p>I always think about what life could be if the crash had never happened. I think about the kids we could have had. The house we could have lived in. The life we would be living together. But then those three words echo in my head, “Gerry is dead.” My broken bones healed eventually, but nothing will ever be able to mend the wound those three words caused.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 15: The World Around Me]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/15/the-world-around-me/"/>
    <updated>2014-10-15T21:19:44-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/15/the-world-around-me</id>
    <content type="html"><![CDATA[<p><strong>Day 15: Given your aims for your writing, look at the world around you: What images appear? (See description.)</strong></p>

<p><em>Given your aims for your writing, look at the world around you, at the landscape: What images appear? What likenesses do you see? How, for you, is the world like itself? When you describe it, what comparisons do you make? What verbs do you use? And when you talk about your business, do you talk about the “bottom line”? Are you in a “rat race,” a world of “dog eat dog,”? Or do you talk about “service” and, as Seth Godin famously makes use of, are you gathering a “tribe”? Place yourself, your writing aims, in a world of images, of analogies. For you, for what you want out of writing, write about how the world is like itself.</em></p>

<p>“The world is your playground.”</p>

<p>These five words succinctly summarize my aims for writing. </p>

<p>I love writing for the same reasons people enjoy series such as Breaking Bad and The Walking Dead, or movies such as Inception, or books such as Harry Potter. People who enjoy different forms of fiction just enjoy being taken out of their current world and thrust into the world of the author’s choosing. For a moment, they can forget their problems and be sucked into someone else’s reality. </p>

<p>Now, I enjoy movies and TV shows as much as anyone else. However, I elect to be thrust into a world of my own choosing. A world where I attempt to see the world through someone else’s eyes, even if that someone else doesn’t even exist. By writing, I can remove myself, even if but for a moment, from the harsh realities of my day-to-day life and find myself living the harsh realities of a creation of my own imagination. </p>

<p>Putting it that way, it may sound like I’m crazy, but I liken it more to a state of mind than actual believing. By changing the way I think, I change the way I write, and therefore, change the way the text communicates with the reader. </p>

<p>The aims of my writing are mainly to explore the human psyche, as well as explore the reasons people do things. In addition, I would like to encourage the readers to question reality–who do we actually know? Most people in our lives wear very elaborate, elegant masks, that cover up who they really are. The successful man next door with the “perfect marriage” may be knees-deep in debt and having an affair. The man who drives an old used car and lives in a small house on the other side of town might be debt-free and have an impressive investment portfolio. There is always more to a person than he or she letse on. Just because something seems to be true doesn’t necessarily make it true. </p>

<p>To be cliche, never judge a book by its cover. This goes both ways–the book with the best cover may not necessarily be the best book ever, nor may the book with the ugly cover be the absolute worst book. However, despite how cliche that may be, people are always surprised when a person reveals a side that they’ve never shown before. People are rarely binary–we are complex creatures with many emotions and countless ways to justify our actions. </p>

<p>The world is my playground. Now, the world I want to play in may not be the world we live in–in that case, I’ll create my own world to play in. I write so I can have others to play in that playground with. And hopefully, we emerge from that playground as changed people. People who see the world in a different way. People who become more introspective and more appreciative of the world around them. </p>

<p>So, come join me in my playground. I might even push you on the swings :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 14: The Barn]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/14/day-14-the-barn/"/>
    <updated>2014-10-14T21:09:07-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/14/day-14-the-barn</id>
    <content type="html"><![CDATA[<p><strong>Day 14: For your prompt today, I am literally taking a page from someone else’s book. (See description for details.)</strong></p>

<p><em>The following, from John Gardner’s The Art of Fiction, page 37, is one of the most famous and enduring writing prompts out there:  Describe a barn as seen by a man whose son has just been killed in a war. Do not mention the son, or war, or death. Do not mention the man who does the seeing. …The result should be a powerful and disturbing image, a faithful description of some apparently real barn but one from which the reader gets a sense of the father’s emotion; though exactly what that emotion is he may not be able to pin down. …No amount of intellectual study can determine for the writer what details to include. If the description is to be effective, he must choose his boards, straw, pigeon manure, and ropes, the rhythms of his sentences, his angle of vision, by feeling and intuition. And one of the things he will discover, inevitably, is that the images of death and loss that come to him are not necessarily those we might expect.</em></p>

<!-- more -->

<p>The sun is setting, the sky is darkening, and the door of the derelict barn finally comes off its hinges and lays flat on the dirt.</p>

<p>The barn stands there, as it has for decades, but on this day, it looms over the farm like a fortress towering over its kingdom, casting a shadow that plunges even the most fertilized grass into darkness. </p>

<p>On the outside of the barn’s wall, a spider is enjoying its dinner, not caring about the decrepit nature of its home.</p>

<p>The spider finishes its meal and spins a web to lower itself to one of the many rotting bales of hay littering the barn. The spider crawls across the moldy grains of straw, disappearing into the pile.</p>

<hr />

<p>A fly flaps its wings through the crisp dusk air, stopping momentarily on a block of wood that used to be a part of a fence, before landing on an old wooden board, barely attached to the barn by a rusty iron nail. The board had once been bright red, but time has washed away all evidence of its color. </p>

<p>The fly buzzes into the barn and lands on a pile of manure. The fly pauses here for an undetermined amount of time, enjoying its new environment. Several other flies join it after a while, buzzing around noisily. The fly zooms away from the manure and stumbles upon the decaying carcass of a cow that was once named Bessie. The milk that this cow had once provided was the source of much happiness. But now, the cow has succumbed to the flow of nature, yet she is still able to provide nourishment for the flies that have found her rotting flesh. </p>

<p>After satiating his hunger, the fly returns to the outside of the barn, zigging left, zagging right. Suddenly, the fly is caught on something, unable to move. It attempts to fly away, but its body is stuck to the silky, yet sticky, web. The fly tries again, flapping its wings, thrashing against the web, but it is unable to escape.</p>

<p>The web begins to bounce as its creator approaches the fly. The fly buzzes one final time in an attempt to escape, before it is fully enveloped in the soft threads of silk.</p>

<hr />

<p>The spider has returned to its nest on the barn’s wall only to find its next meal thrashing about, attempting to escape. It spins its silk around the fly until it is fully wrapped in a cocoon. Having secured its next meal, the spider lowers itself down to the ground, scurrying across the barren dirt. Though it is dark, the spider is still able to perceive a change in the light, but is unable to conceive of any final thoughts as the boot is raised above the spider and crashes down to the ground. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 13]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/14/day-13/"/>
    <updated>2014-10-14T16:30:29-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/14/day-13</id>
    <content type="html"><![CDATA[<p><strong>Day 13: Choose and write at least two of the following options: (See description for details.)</strong></p>

<p><em>Choose and write at least two of the following options:</em>
<strong>-Sarcastic email to a colleague</strong>
-Memo to people you supervise, changing a policy<br />
-Email to your in-laws asking for financial help<br />
<strong>-Note to your loved one…the day after a difficult and lingering conflict</strong>
-Blog post for your reading public that, for you, is a little out of character</p>

<!-- more -->

<h2 id="sarcastic-email-to-a-colleague">Sarcastic email to a colleague</h2>

<p>Subject: Do’s and Don’t’s of visiting my cubicle</p>

<p>Dear John, </p>

<p>Next time you come to my cubicle to tell me your latest exploit of a drunk girl, please do at least one (but preferably all) of the following things:</p>

<ol>
  <li>Take a breath mint. Seriously, those peppermints are not on my desk for nothing.</li>
  <li>Wear deodorant. I would let you use mine but I have a feeling that the amount you need is more than the amount my stick provides. </li>
  <li>Whisper. I know you’re excited but you really don’t need to yell at the top of your lungs that the girl couldn’t even say her own name.</li>
  <li>Check if I’m there. It’s embarrassing to have my cube-mate tell me that you wanted to see me so you could help get me laid. </li>
  <li>Get my name right. It’s Rick, not Mick. </li>
</ol>

<p>While you’re at it, please do <strong>not</strong> do the following things:</p>

<ol>
  <li>Invite me to a party. I don’t want “summa dat.”</li>
  <li>Take my pens. My pens mysteriously disappear after you come to my cubicle. I’m not saying it’s you, but no one else ever visits my desk. </li>
  <li>Spin my chair around. Especially when I’m sitting in it. </li>
  <li>Drink. C’mon, we’re at work, not the pub.</li>
  <li>Hit on my cube-mate. Seriously, she hates that.</li>
  <li>Talk to my cube-mate. Really, she hates you. </li>
  <li>Talk at all. Why can’t you get the picture that I don’t want to hear your stories? </li>
</ol>

<p>Actually, come to think of it, please stop visiting me at all. I don’t like you. I don’t know why you think I like you. I don’t know why you ever thought I liked you. I think you’re a repulsive alcoholic womanizer, and I would rather not be associated with you. I asked my cube-mate out once, and she said that she doesn’t want to associate with anyone who thinks you’re cool. The problem is that I don’t think you’re cool, and it would really help if you stopped visiting me so that I don’t have to be associated with you. </p>

<p>If you want an ear to talk off, go talk to Steve. He’s always sleeping in his cubicle anyway, so you may as well wake him up with your loud voice. </p>

<p>Sincerely, 
RICK (not Mick)</p>

<h2 id="note-to-my-loved-one-the-day-after-a-difficult-and-lingering-conflict">Note to my loved one, the day after a difficult and lingering conflict</h2>

<p>Hey honey,</p>

<p>Listen, I’m really sorry about yesterday.</p>

<p>I was out of line. I shouldn’t have said those things. I was angry, but that does not give me the right to do what I did and say what I said.</p>

<p>I’m really lucky to have you. I really am. I know that I should communicate that more often to you, but sometimes we get bogged down in the mundane happenings of everyday life that it slips my mind to tell you. </p>

<p>So I’m telling you now, honey. I love you with all my heart and I hope that going forward, we can let our undying love come first, and not our egos or petty squabbles.</p>

<p>To make up for everything, look in the driveway :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 12: Work That Matters]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/12/day-12-work-that-matters/"/>
    <updated>2014-10-12T16:25:08-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/12/day-12-work-that-matters</id>
    <content type="html"><![CDATA[<p><em>Day 12: Describe the lives of your audience by describing the lives of singular individuals.</em></p>

<p><em>Describe the lives of your audience by describing the lives of singular individuals. Describe concerns, desires, suffering. What do they (not they, but he, she) do, say, think, and feel? Make them (not them, but him, her) as human as possible.</em></p>

<!-- more -->

<h2 id="note">Note:</h2>
<p>I took the last statement of making the character as human as possible a bit too far, and evolved from describing the life of an individual into a short story. However, by the time I realized I was off-prompt, I’d gone too far and decided to finish the story. The take-home point is that my audience is full of people like David, though perhaps not with his exact story :) </p>

<p>His friends call him David, though his real name is Davoud. He’s nothing spectacular. Just an ordinary engineer. </p>

<p>Every day he pores over diagrams, charts, and graphs in an attempt to perfect the design of the device his company makes. </p>

<p>Although David loves his work, or at least, that’s what he tells himself and his wife, he feels unfulfilled. He really loves the idea of creating something that will help individual lives, rather than pushing the frontier of technology for the sake of pushing it. </p>

<p>David is swamped with work and other worries, so he has no time to cultivate his passion for helping people. His skill in hardware engineering is a difficult one to bring to consumers on a direct basis, so he is lost. </p>

<p>While having coffee with his best friend Shawn, David confides in him and asks what he should do. Shawn tells David that he should be grateful for having a job in the first place, let alone having one that pays as much as he makes, and that it’s a waste to throw his hardware engineering work to scratch an itch that might not even pan out. He concludes by saying that you can either do fulfilling work, or pay the rent.</p>

<p>David tells Shawn a white lie and says that he agrees completely. The truth is, David only half-agrees. David certainly is lucky to have such a prestigious career, and the money that comes alongside, but he feels that someone as intelligent as him should be making a real difference in perhaps not the world, but definitely in individual people’s lives. He thinks of Mark Zuckerberg, Richard Branson, Steve Jobs, and Jeff Bezos; people who changed the world with their revolutionary ideas.</p>

<p>However, his thoughts are brought back down to earth by Shawn, and his dreams are shattered as he realizes that perhaps he will never be as great as those figures. </p>

<p>David takes solace in the fact that there’s no point in trying, and shelves his dream in the corner of his mind, the corner where sentimental, yet fundamentally useless, things are stored. Things to be looked at, but not to be used. </p>

<p>One day, while eating breakfast at a cafe, David notices something not particularly peculiar, but definitely concerning. An old man is hobbling from patron to patron, unsuccessfully asking for some spare change. The patrons, each with a 7-dollar breakfast and a 3-dollar coffee in front of them, dressed to the nines, are suddenly broke, unable to give this man the smallest fraction of their wealth. </p>

<p>Dejected, the old man begins sifting through a trash can. David instantly sees himself in the old man–both have a hunger that needs to be satiated, and when that hunger can’t be satiated after numerous attempts, is instead fulfilled by taking scraps of other people. </p>

<p>David decides he needs to put a stop to this–both the old man digging through the garbage, and the method of satiating his hunger. </p>

<p>Though he has no cash on-hand, David invites the old man to dine with him, buying a sandwich and a drink for him. </p>

<p>The old man graciously accepts, and the two chat over breakfast burritos and coffee. </p>

<p>David asks the old man why he doesn’t have any money to buy food. The old man replies that he once worked in finance, and had a huge house, with a beautiful wife, and a few kids. When the economy collapsed, he lost his job, and had trouble finding another one. He had to downsize the house and take a job at Starbucks, and it was then he was met with the news that his wife wanted to divorce him and take the kids. The man was ridden with the undue stress of divorce, losing his kids, and struggling to pay the bills, as well as paying back the debt he’d taken on while he was rich, and upon a visit to the doctor, was told that he had stomach cancer. He was able to barely pay for his medical bills, but the subsequent surgeries rendered him unfit to work, and as such, he was unable to pay the rent of his house, and was left on the streets. Since then, he has been wandering the streets, begging for scraps. </p>

<p>The old man looks at David with a look of sincerity, yet urgency, and says, “Never settle for scraps in your life. Do things that make you grow, that make you happy. Doing things for the money will only attract to your life people who want money.”</p>

<p>The old man thanks David for the meal, and hobbles off into the crowded streets of the city.</p>

<p>David ponders the old man’s story, and realizes that their stories are not much different. The old man was capable of so much, but focused only on making money rather than creating value. And now he is not capable of much, and has to settle for scraps. David is capable of doing more, but settles on unfulfilling work–scraps, in the context of his life. Furthermore, David seems to only attract to his life people who are also unfulfilled in life, such as Shawn. </p>

<p>David surmises that the ten dollars spent on the old man’s meal would be a drop in the bucket compared to the value of the old man’s advice, but only if he took action on it. David makes the decision to begin associating himself with people doing fulfilling work that still pays the bills. </p>

<p>He applies for jobs at companies that has a mission that he truly believes in. He begins a new job that is similar to the job he was working previously, except now he knows that his work is going to mean something in the world. They even let him make some key decisions because of his expertise. David had never been happier in his life. </p>

<p>David was once a hardware engineer, living an unfulfilled, meaningless life. Now, David is still a hardware engineer, doing the same work, but feels much more fulfilled. All it took was a change in what his work meant to him changed his entire outlook on life. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 11: When a Plan Is Not Necessary]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/11/day-11-response-to-andrew-jiang/"/>
    <updated>2014-10-11T22:54:36-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/11/day-11-response-to-andrew-jiang</id>
    <content type="html"><![CDATA[<p><em>Day 11: After looking back and considering the blog post or article, add your own voice. Write your own response.</em></p>

<!-- more -->

<p>I recently read <a href="https://medium.com/@andrewjiang/unintentionally-in-yc-9dd0ccbaeb44">this article</a> about a guy named Andrew who left finance with no direction, and a couple months later found himself in Y Combinator, possibly the most prestigious start-up accelerator in the US. I was really inspired by the story because as an entrepreneur, it is my dream for me to get accepted into YC or a similar accelerator. The story really solidified the fact that great things can happen if you simply <strong>start</strong>.</p>

<p>When I read that Andrew had no plan when he moved to the Bay Area, it really made me wonder–is a plan really necessary to succeed in life? There’s the common saying, “failing to plan is planning to fail.” But how much of that is true? These days we hear a lot of stories of people who “accidentally” make it big. </p>

<p>After reading this article, as well as other similar articles, it made me think that perhaps a definite plan is not always necessary. Of course, there are consequences to not having a plan, which is why some sort of fallback is necessary. For example, Andrew lived (presumably) off of savings (and ramen) and worked part-time so his burn rate would be reduced. Obviously, he wouldn’t have been able to live forever under those circumstances, but it bought him time to figure out what he wanted to do. </p>

<p>In that time, instead of “figuring out” what he wanted to do, he went ahead and built stuff. He knew he wanted to build meaningful apps, so he went ahead and did that. And that leads to the first lesson we can derive from his story: </p>

<p><strong>Find your itch and scratch it with passion.</strong></p>

<p>In the digital age we live in, anything you create can be instantly viewed by someone at the other side of the globe. And you never know who that person knows. </p>

<p>When Andrew started losing his mojo with solo projects, he joined a hackathon. There, his passions were rekindled and he got inspired to play in a bigger sandbox. In addition, he met some people that would be integral to the start-up he’d be forming. And that gives us the second lesson we can derive from his story:</p>

<p><strong>Get around like-minded people</strong></p>

<p>A common saying is, “It’s not what you know, it’s who you know.” I believe it’s kind of true, but also kind of backwards. “It’s not who you know, it’s who knows you.” By getting around like-minded people, you can rekindle your motivation but also get more eyes on your number one product: you (and your skills). It’s a great and fun way to make friends too. </p>

<p>After Andrew got a few important eyes on his work, he and his business partner Paul formulated what would become Bayes Impact (their non-profit). Their little side project quickly escalated into something that consumed their entire lives, and the rest, as we know, it history. Perhaps the most underscored, but also the most important, lesson we can get, is this one:</p>

<p><strong>Know when to stop trying new things and hone in</strong></p>

<p>Andrew went from trying something new every two weeks to finally focusing on a single passion project. He knew somewhere, perhaps in his heart, that this was THE project. Maybe it was the vision that he and his team had, maybe it was the fact that he enjoyed it so much that he dedicated so much of himself to it, but regardless, he knew it was time to stop trying new things and start focusing his energies on Bayes Impact. </p>

<p>Now his team is in YC, and there’s nothing that can stop them from changing the world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 10: Unintentionally Hired by Google]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/11/day-10-imitation/"/>
    <updated>2014-10-11T16:37:20-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/11/day-10-imitation</id>
    <content type="html"><![CDATA[<p><em>Day 10: Return to the blog post or article you reviewed yesterday. (See description for details.)</em></p>

<p><em>Return to the blog post or article you reviewed yesterday. Today, imitate its genre and purpose, but write about a topic or tell a story of your choosing. That is, write about what you want, but write in the language of the blog post or article you reviewed yesterday; make use of its logic and conventions and symbols; and find a way to offer a surprise!</em></p>

<!-- more -->

<h2 id="important-note">Important note:</h2>

<p>The following article is fictional. It was written for the sole purpose of imitating the writing style of <a href="https://medium.com/@andrewjiang/unintentionally-in-yc-9dd0ccbaeb44">this article</a>. My name is not Chelsea, I did not drop out of Yale, nor do I work for Google (yet!), nor did I ever create an app called EncouragUr (though it’s on my list!).</p>

<h1 id="unintentionally-hired-by-google">Unintentionally Hired by Google</h1>
<p>Leaving an Ivy League school only to be hired by the world’s most sought-after tech giant
———————————-</p>

<p>In May of 2013, I determined that the walls of my dorm room at Yale were limiting my creativity. I visited admissions to let them know not to re-enroll me for Fall semester, and at that point I was no longer a student. I sold off my belongings and booked a one-way flight to SFO, eager to start fresh. No job, no plan, not even a place to live (I would be what I called an “AirBnB couch surfer” for the first two months).</p>

<p>As of this writing, it’s exactly one year later, and ten months since I started employment at Google. How did this happen?</p>

<p>Here’s the entire unintentional story. </p>

<h2 id="moving-fast-and-breaking-things">Moving Fast and Breaking Things</h2>

<p>During the first two months living in the Bay Area, I slept in many different beds thanks to AirBnB, and survived off of dollar Taco Tuesdays and Top Ramen. I worked part-time at a grocery store to reduce the burn rate of my savings and get discounts on groceries. At nights would crank out prototypes, fleshing out new ideas every few weeks. </p>

<p>I made some garbage apps, and I made some priceless gems. Some of them still have potential, but I simply didn’t have the drive to pursue them further, which leads me to the first lesson I learned: <strong>You need to care deeply about the problem you’re solving.</strong></p>

<h2 id="lets-chat">“Let’s chat.”</h2>

<p>I began to feel a bit lonely and unfulfilled, so I decided to attend my first hackathon. I met with some great people at this hackathon, but the resulting product is the direct cause of my employment at Google. </p>

<p>The mission of this particular hackathon was to build something that one person can use to help another person in their lives. Our team built “EncouragUr,” a way for people to send anonymous messages/postcards to their friends who may be feeling a bit unmotivated. </p>

<p>I shared the hack with my friends on Facebook and got a lot of positive feedback. One person in particular was my friend Justine, who worked at Google, left a simple comment: “Let’s chat.”</p>

<p>I messaged her and we had dinner together, and she told me she’d shared the app with her hiring manager, saying that my passion for unleashing the greatness within people would be a great asset to Google. I was taken aback–I had no intentions of working for Google. I just wanted to freelance my way to paying bills and being debt-free. I thanked her and continued my merry ways of project-to-project, couch-to-couch living, anxiously awaiting that email. </p>

<h2 id="hi-chelsea-we-heard-about-your-work-and-would-like-to-meet-with-you">“Hi Chelsea. We heard about your work and would like to meet with you.”</h2>

<p>I told one of my hosts about my situation and he told me that he’d heard that Google’s hiring process was notoriously difficult. That made me even more anxious, so all my projects came to a dead stop as I began brushing up on my algorithm and data structure skills. </p>

<p>A week after that dinner, while I was aimlessly browsing Reddit to wind down, I got the email. </p>

<blockquote>
  <p>From: Ryan (at Google)
To: Chelsea </p>

  <p>Hi Chelsea. We heard about your work and would like to meet with you.</p>

  <p>Ryan
Hiring Manager at Google</p>
</blockquote>

<p>I could hardly believe my eyes. I quickly replied and was soon on the phone with Ryan, who scheduled me for an interview on the Tuesday of the next week.</p>

<p>That weekend was manic. I did my best to solve problems on TopCoder, CodeAbbey, anything that could help me with my algorithmic thinking. I polished my interviewing skills and filled out my notebook with questions I thought I should ask at the interview. By the time Monday rolled around, I was breathing coffee, but I knew Dijkstra’s algorithm better than the back of my hand. </p>

<p>I decided to take Monday to relax, so I could be well-rested for my big interview on Tuesday. </p>

<p>The day of the interview will always be forged in my memory. I nervously sat in the waiting room while another candidate was being interviewed. When they called me into the room, I was so nervous I tripped on the carpet while walking into the room. Classy. </p>

<p>Sitting in front of me was my interviewer: David Zen. He cut to the chase and had me solve a problem on a whiteboard. He asked me about my experience. My passions, my life goals. There was nary a moment of silence as our interview convened. </p>

<p>After perhaps the fastest half-hour of my life, I shook his hand, thanked him, and was on my way out. While on the BART back to SF, I called my boyfriend, my mom, my dad, my brother; anyone who I thought would care about this big interview. I was so excited and anxious and nervous that I didn’t even notice the incoming call from the 408 area code. I finally noticed it when I got off the BART in SoMa, San Francisco, and promptly called back. </p>

<p><strong>It was Ryan, with an invitation to begin employment at Google the following week.</strong></p>

<p>Salary and relocation would be negotiated in the following days, but I’d done it. Two months after I’d dropped out of school and flew to California with nothing but the clothes in my bag and my MacBook, I’d secured employment at Google. For those of you who want a career shift or just a new life, why wait? <strong>Start now, you never know who will notice.</strong> Or, in Cal Newport’s words: “Be so good they can’t ignore you.”</p>
]]></content>
  </entry>
  
</feed>
