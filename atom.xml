<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rasheed Bustamam Blogfolio]]></title>
  <link href="http://abustamam.github.io/atom.xml" rel="self"/>
  <link href="http://abustamam.github.io/"/>
  <updated>2014-10-04T22:16:12-07:00</updated>
  <id>http://abustamam.github.io/</id>
  <author>
    <name><![CDATA[Rasheed Bustamam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Important Truth for Creatives]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/04/important-truth-for-creatives/"/>
    <updated>2014-10-04T21:59:44-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/04/important-truth-for-creatives</id>
    <content type="html"><![CDATA[<p>There are many important truths for creatives. The three most important truths to me are, “You are what you write,” “There is no such thing as a stupid idea,” and “Experiment with everything.” </p>

<p>Although I’d love to expand on all three truths, allow me to dive into the first one: “You are what you write.” </p>

<!-- more -->

<p>When we read a book by an author we aren’t familiar with, the only thing we know of the author is that he or she wrote the words on the pages. That is the only node of communication between author and reader. </p>

<p>The opinions expressed in the book may not necessarily be of the authors opinion. For example, a fiction book that glorifies the crime life does not necessarily mean that the author glorifies crime. It simply means that the author finds the subject of crime fascinating enough to warrant writing about it. </p>

<p>The interesting thing about writing is that in all cases, the reader gets a tiny glimpse of the inside of the writer’s mind. No matter what the piece is about, the resulting words on the page are manifestations of the ideas that were conjured by the writer. </p>

<p>As the writer, we are allowed the opportunity to choose what part of our minds we would like to expose; we are given the chance to choose which ideas we deem important enough to write about. </p>

<p>If we view our writings as an extension of our consciousness, then we don’t necessarily need to worry about critics. Some people like crime novels; some people hate crime novels. We never need to write for the people we know will hate our work, we simply write for the people we think will like our work. </p>

<p>By viewing our writings as a part of us, we are allowed to express ourselves in our writing in the same way we express ourselves in our speech or in our attire. Some people use slang, some people speak very formally. Some people dress in dark clothing, others dress in bright clothing. We never pay any mind to people who don’t like the way we dress, so we don’t need to pay any mind to people who don’t like the way we write. </p>

<p>But at the same time, it’s important to keep in mind the right message for the right audience. We wouldn’t show up to a wedding wearing the same clothes we’d wear to a birthday party. So it is important to keep in mind who our audience is, what our purpose is, and prepare to face the consequences that may arise for attempting to “break the norm.” </p>

<p>Perhaps the most important reason “You are what you write” is so important is that if we treat our writings as a part of ourselves, then we will respect our writings as much as we respect ourselves. If we expect our readers to respect our writings, we must first respect those same writings, just like we can’t expect people to respect us if we don’t respect ourselves. </p>

<p>If we hold respect for our writings, then we raise the bar for our own quality of writing, and in turn, we become better writers. Just like a pianist must practice a piece many many times before recital, we as writers must write many many times before publications. We see many books that have made authors famous, but what we don’t see is how many times that book has been written and rewritten and thrown in the trash before it was polished in to the gem we see on bookshelves. </p>

<p>By treating our writings with respect, we commit to our craft of writing by continually improving. I hope you respect yourself and your writing enough to commit to constant improvement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Audience]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/03/my-audience/"/>
    <updated>2014-10-03T22:05:17-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/03/my-audience</id>
    <content type="html"><![CDATA[<p>It’s strange to think of myself as an authority figure. I view myself as a normal person going about every day life one day at a time.</p>

<p>However, as I pointed out before, I write to manifest my ideas into the real world. They may be ideas of philosophy or ideas of fictitious worlds. The ideas may mean nothing to the rest of the world, but to me, my ideas ARE my world.</p>

<!-- more -->

<p>So what am I an authority on? Well, on the non-fiction side, I can tell vivid stories that my words can bring to life. I told my coworkers the (true) story of me letting a spider live in my room. Such a simple story and yet, my coworkers still mention that story every so often.</p>

<p>I can uncover wisdom and life lessons from the most mundane concepts. Going back to my spider story, the moral there was that nothing is so insignificant in the world that is not worth mentioning. I learned that there are no boring “things,” just boring ideas.</p>

<p>And that is what I’m an authority on–creating magnificent ideas from seemingly “boring” things.</p>

<p>On the nonfiction side, my goal is to inspire, to encourage, to motivate, to teach. I believe that writing must make the world a better place, even if it is a world within the confines of one’s intellect. My ideal reader will ask of himself, “How is it that such a simple story can contain such profound meaning?”</p>

<p>If my ideal reader is to ask that, then my ideal goal is to keep my stories simple, but to twist them in a way that provides meaning beyond what most people expect from a simple story.</p>

<p>Fictionally speaking, I take my knack of real-life story telling and create an imaginary world and bring it to life. Even if the story is as far-fetched as wizards battling knights, I want it to be believable within the confines of the story. The world will have its own laws, similar to how our world has the laws of conservation of mass and the law of gravity. The story must adhere to these basic laws, but after the world is established, the characters in the world will shape the story.</p>

<p>I’m a fan of psychological thrillers. I never like cheap scares like pop-ups or screams; I prefer the type of thriller that keeps you on edge because the protagonist(s) and the antagonist(s) are trying to keep one step ahead of one another.</p>

<p>My ideal audience will be people who enjoy movies such as the Bourne series, and shows like Breaking Bad. Perhaps my writing will never reach the caliber of these wonderful films/shows, but I want to bend the mind of the reader. Just when the reader thinks one thing will happen, another thing happens and turns the story upside down.
In my fiction, I want to explore themes such as love and betrayal, but not so cliche as the femme fatale who ends up being the arch nemesis of the protagonist. In the real world, things are rarely binary–real people have real emotions that leave them conflicted and confused. What does a character do when faced with a moral dilemma where both options will hurt someone he loves?</p>

<p>I want to be an authority on the human psyche–explore why someone would cheat on their beloved, or murder their best friend. In addition, the writing will reflect the state of mind of the character in the spotlight, so readers can join the character in his metamorphosis.</p>

<p>To summarize, I want to be an authority on two things– manifesting profound lessons from mundane ideas, and creating characters that transform into completely different people. Through writing, I hope to grow into this authority and speak to the hearts of my readers.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Journey of Writing]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/02/journey-of-writing/"/>
    <updated>2014-10-02T00:23:18-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/02/journey-of-writing</id>
    <content type="html"><![CDATA[<p>Asking someone like me why I write is akin to asking someone why they drive. </p>

<p>Most people drive to go from point A to point B. There is something that is waiting for them at point B that warrants leaving point A. </p>

<p>Similarly, writing is my vehicle for reaching a new state of consciousness. Every word that I write is a step to reinvention. Reinvention for what, though? And what exactly is my point B? </p>

<!-- more -->

<p>In a world where change is the only thing that is constant, reinvention is necessary daily. If you aren’t keeping up with the ever-changing world, it will leave you behind. One way to keep up is to read. Another way to keep up is to write. Allow me to explain.</p>

<p>In order to write, we must first observe. Ideas must come from somewhere. It could be something as simple as a sunset, or as glorious as the aurora borealis. </p>

<p>When we really open your eyes to the world around you, and appreciate the beauty and perfection of everything, from the grasshoppers bouncing from one blade of grass to another, to the hundreds of people we don’t know and perhaps may never know, who take the same exact route as us to work, we begin to realize how insignificant we are. That guy who just took that last parking spot before you? He’s just like you. He has errands to run. Mouths to feed. He doesn’t know you, and you don’t know him. And it will likely stay that way because the world is bigger than you think. </p>

<p>By observing the world, and asking ourselves questions about why the world works a certain way, we can begin to form our own conclusions about how the world works. They don’t need to be scientific conclusions. Just theories and curiosity.</p>

<p>The formation of these ideas is incredibly important. Ideas are the key component of any piece worth reading. It’s necessary to become great at creating ideas that are worth writing about. And if you have no ideas worth writing about, then it’s even more crucial to make that idea worth writing about. </p>

<p>In yesterday’s piece, I argued that everything is inherently meaningless because the world is so vast, both in time and space, that nothing we do will ever matter. However, the beauty of life comes from the meanings we attribute to previously meaningless things. </p>

<p>The same goes for ideas–any idea can be worth writing about and expanding upon, only if you give it the meaning to become important. </p>

<p>A spider in my room is hardly an ingenious idea. In fact, there are very few ideas that could be more boring than that. However, through some observation and introspection, I gave that spider meaning to my life. Perhaps I even gave that spider meaning to other people’s lives. </p>

<p>And that is what I strive to do with my writing. I want to inspire readers. I want them to breathe meaning into previously meaningless things. I want to encourage them to slow down in the fast paced life, and sit outside, and observe the beautiful world around them. </p>

<p>That is my point B–inspiration. I write both to inspire myself, and to inspire others. </p>

<p>While I find my voice, I hope to be inspired by others taking the same journey as I am. I hope to forge lasting friendships and learn a lot from other people like me. </p>

<p>Conversely, I would also like to inspire others, and share mistakes I’ve made with other people like me.</p>

<p>I wish to join a community of passionate people full of ideas. We are all in the same journey, heading in the same direction, perhaps with a slightly different point B. But we’re all in the same vehicle, and as such, our combined powers will make us undefeatable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[And So I Write]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/01/and-so-i-write/"/>
    <updated>2014-10-01T00:22:45-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/01/and-so-i-write</id>
    <content type="html"><![CDATA[<p>Who am I? Well, in the scheme of things, I’m a nobody. Probably not going to go down in history for anything worthwhile.</p>

<p>And I’m perfectly fine with that.</p>

<p>99% (that’s a low estimate) of all people in the world are nobodies; people who, a century after their death, will be lost in the myriad of databases. People whose entire life’s work will be meaningless and not have contributed anything to the society of the future. Nobodies who strive daily to accumulate things that won’t even last for fifty years.</p>

<p>Despite that depressing thought, being a “nobody” is beautiful. Being able to attribute meaning to a seemingly meaningless existence is simply incredible. For the billions and billions of nobodies who exist, and have existed, in this world, what makes life worth living? Why do we wake up every day, knowing that it won’t matter in a hundred years? Why do we bother going through the monotony of daily life considering that our days are not even a blip on the radar of the wheel of time?</p>

<!-- more -->

<p>I can tell you only from the perspective of this one “nobody” among billions.</p>

<p>First, I believe nothing is truly meaningless. We’ve given meaning to seemingly random lines and squiggles on paper, that we now call text. Depending on the font, the lines and squiggles may look completely different but they still convey the same meaning.</p>

<p>Going further, though the meaning of those lines and squiggles may be obvious, the way those lines and squiggles are organized and shaped could express even deeper meaning. We have the iconic “f” symbol–a tiny box taking less than a square-inch of space on paper says instantly– “we’re on Facebook!”</p>

<p>And that’s exactly how I view my life. Everything in life has meaning, if I take the time to give it meaning.</p>

<p>Just two weeks ago, I decided to allow a spider to take residence in a corner of my room. It was just a spider, among countless other spiders–spiders that I usually kill. But I decided to try something new, and did not kill the spider.</p>

<p>Every couple days he would disappear, but he would come back, until yesterday I saw his curled up body under his web.</p>

<p>The spider was inherently meaningless. His short life means nothing in the scheme of things. It didn’t matter that I had decided not to kill him that one day–two weeks later, he would already be dead, and nothing would have changed.</p>

<p>Yet that spider meant a lot to me. Its prolonged existence meant that I was letting go of an irrational fear that millions of people around the world have. It made me wonder why we humans feel it is perfectly fine to destroy spiders’ nests–nests that are beautifully constructed and take its artists sometimes its entire life to build?</p>

<p>It made me question what we would do if a higher being viewed human existence as insignificant as humans view arachnid existence. How we would react if the higher being destroyed our technology the same way we destroy spider nests.</p>

<p>The world will continue to turn, with or without humans; with or without spiders. And yet, as long as spiders exist, they will continue to build their nests; as long as humans exist, we will continue to push the envelope of what is possible.</p>

<p>And that’s where I fit in. I may not be inventing a brand new car, or rocket ship, or mobile device. I’m simply inventing new things in my life. Learning languages, learning programming, satiating my curiosity for the world around me, breaking the boundaries of what I thought was possible for myself, and most importantly, using those random lines and squiggles to communicate my findings with the world. The continuous challenge to be challenged drives me to wake up and carpe diem every morning.</p>

<p>Every day, “I love you”s are exchanged between couples, parents and children, siblings, etc. Three seemingly random utterances of the breath that can have such a profound effect on someone’s life. Three words that can mean the difference between life and death for a depressed individual, or the difference between feeling special and feeling neglected for a child. Even though these words have no meaning in most other languages, they are among the most powerful words in the English language. The fact that this small utterance could have such a profound meaning that it could make or break a relationship is possibly the most beautiful thing about human beings.</p>

<p>I’m perfectly fine with my meaningless existence. But the meaning I have given my life is all the meaning that is necessary for me. I hope you join me in my journey to discover and add more meaning to life. And so I write…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Habit Formation: A Case Study]]></title>
    <link href="http://abustamam.github.io/blog/2014/09/25/on-habit-formation/"/>
    <updated>2014-09-25T08:20:50-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/09/25/on-habit-formation</id>
    <content type="html"><![CDATA[<p>Ever try to change a habit? Either starting a good habit, or eliminating a bad habit?</p>

<p>Of course. We all have tried. And we all know that habit formation/change is incredibly difficult. We’ve all tried different “productivity” systems (that usually don’t work), different affirmations (that usually fall out by the wayside), and other silver bullet methods that seem to work for everybody but us. </p>

<!-- more -->

<p>Over the past couple of months, I unconsciously created some great habits, such as coding (almost) every day, drinking more water, drinking less sodas, journaling daily, and waking up earlier. I didn’t “try” to create these habits. These habits kind of just “came” to me, and it was really quite shocking when I realized that I’d become such a changed person over the past few months. </p>

<p>I’m not writing this to brag about how awesome I am, I’m writing this to dissect the science of habit formation/change so that perhaps you can implement the same methods to change your habits. </p>

<p>There are three steps to habit change. </p>

<ol>
  <li>
    <p>Establish the right mindset about habits.</p>
  </li>
  <li>
    <p>Create a pain point performing a bad habit, or not performing a good habit </p>
  </li>
  <li>
    <p>Replace bad habits with good habits</p>
  </li>
</ol>

<h3 id="establishing-the-right-mindset">Establishing the right mindset</h3>

<p>First, stop looking for new systems. Granted, some systems work better than others, but it’s like saying a chainsaw works better than an axe. The tool may be more efficient, but you still need a person with the skills to wield the tool. For habit change, that skill is “mindset.”</p>

<p>The greatest productivity system in the world is useless in the hands of someone who doesn’t have the right mindset about habit change. </p>

<p>Habit changes are meant to be lifelong. Don’t “go on a diet.” People who “go on a diet” are destined to eat unhealthily for the rest of their lives. Why? Because they think they can get that beach body by simply following the latest fad diet for six weeks. If your mindset about habit change is that temporary habit changes can make your life amazing, then you’re going to stop that habit as soon as you realize it’s not working. </p>

<p>If you can stop watching 6 hours of TV every day for a month, why can’t you stop it for a lifetime? If you can wake up early every day for a month, why not do it all the time? Habit change is a life-long marathon, not a sprint. Which means that you need to create moderate habits rather than create extreme habits. </p>

<p>Moderate habits are simple things like exercising for 15 minutes every day. Extreme habits would be running 5K every day. Don’t go for the extreme. Start moderate and build up. </p>

<p>Habit change is as simple as you make it. Start with simple habits that seem crazy <em>not</em> to do, and then expand from there. As programmers say, “iterate.”</p>

<h3 id="creating-pain-andor-pleasure-points">Creating pain and/or pleasure points</h3>

<p>Recent psychology shows that positive reinforcement trumps negative reinforcement. Anecdotally speaking, this seems to be true. However, habits will never provide (explicitly, at least) the positive reinforcement required to maintain the habit. </p>

<p>This is where your system comes into place. I said stop looking for new systems, but the ideal system will provide both positive and negative reinforcement. If your system does not have this, I suggest you look for a new one, but not before you’ve changed your mindset about habits.</p>

<p>The system I personally use (currently) is (HabitRPG)[habitrpg.com/]. It gamifies habit creation, which is cool. But more importantly, as a gamer, I really really hate losing health. If you miss a “daily” you lose health. So there is a direct pain-point associated with <em>not</em> completing my daily to-dos. </p>

<p>In addition, when you <em>do</em> perform your habits and to-dos, you get virtual currency, and you also have a chance to get a virtual pet. It may sound extremely silly, but it’s effective, at least for me. </p>

<p>For those of you who don’t feel the pain or pleasure of virtual characters, there’s a new product coming out called (Pavlok)[http://prelaunch.pavlok.com/?ref=3bdc77fc87] which will shock you whenever you’re not doing whatever you’re supposed to do. It will also reward you for doing good habits. This is a product I’m definitely going to check out because there are a lot of bad habits that I do unconsciously that HabitRPG can’t necessarily help me with. </p>

<p>If you think voluntarily shocking yourself is insane, that’s because it is. But you kind of need to be insane in order to experience rapid change. Plus, if you watch that video, you’ll see the science behind the shock, and how it eliminates your bad habits by creating that pain point. </p>

<p>Once you’ve created an association with pain for not following through with your habits, you simply need to follow through with that for at least 21 days. Habits are not too different from cars. You need to keep them maintained so they continue running for you. </p>

<p>If you don’t want to use any particular system, you can (temporarily) hack your body into feeling physically ill when you do a bad habit. This is something that I inadvertantly stumbled upon, so I have no way of replicating it, but this is my experience.</p>

<p>During Ramadan, Muslims have to fast. Ramadan just so happened to be during the summer this year, so it was hot and the days were long. In order to conserve energy and fluids, it’s extremely inadvisable to have many sweets during eating time. So in order to fast without feeling sick, I stopped having sweets (including soda).</p>

<p>By the time Ramadan was over, I was craving a soda, so I had some Dr. Pepper (or Mr. Pibb, I always confuse the two). I felt physically ill when I drank it. It may have been psychological, it may have been physiological, but I didn’t like the feeling. But I was still craving the soda. So that leads me to step two.</p>

<h3 id="replacing-bad-habits-with-good">Replacing bad habits with good</h3>

<p>I realized that I liked drinking soda for two reasons: sweetness and fizziness. So I compromised: I bought some fruit juice and some Sprite so I could slowly wean myself off soda. I would mix the two so I could have sparkling juice. One week later I was able to drink the fruit juice on its own without missing the fizziness. Now I’m weaning myself to water-only.</p>

<p>Another example in my life was eating less sweets. I’m a sucker for sour gummies. (For the love of God please don’t get the (sugar free ones)[http://www.buzzfeed.com/michaelrusch/haribo-gummy-bear-reviews-on-amazon-are-the-most-insane-thin#4eh3m3r]). I replaced that with eating grapes, and/or 100% fruit rolls. I still have sour gummies once in a while, but not as often. </p>

<p>That’s what is known as habit replacement. When you try to stop a habit, it leaves an empty space in your life. If you don’t replace that empty space with a good habit, you’re going to fall back onto the bad habit. Figure out why you have your bad habits. Is it to satiate a craving for sweets, or fizziness? Well, ask yourself if you can satiate that craving with a healthier habit. </p>

<h3 id="commit-to-commit">Commit to commit</h3>

<p>Here’s your homework… </p>

<ol>
  <li>Change your mindset about habit change. Jump into good habits knowing that they will be there for life. Kill bad habits knowing they’ll be gone for life. Adjust your mindset to find happiness in this new lifestyle.</li>
  <li>Identify ONE bad habit in your life that you’d like to change.</li>
  <li>Figure out why the habit exists, what need or craving it satiates. </li>
  <li>See if there is a healthy alternative that can serve the need. </li>
  <li>Eliminate the habit with prejudice by getting a (Pavlok)[http://prelaunch.pavlok.com/?ref=3bdc77fc87] or using (HabitRPG)[habitrpg.com/].</li>
  <li>Share your results on Facebook and inspire others to change their lives.</li>
</ol>

<p>Good luck! </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Month Stripe Payments Part 1]]></title>
    <link href="http://abustamam.github.io/blog/2014/08/17/one-month-stripe-payments/"/>
    <updated>2014-08-17T20:26:36-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/08/17/one-month-stripe-payments</id>
    <content type="html"><![CDATA[<p>I first started coding with One Month Rails. It was a very simple tutorial to go through, and it took me a month to go through it.</p>

<p>Now, <a href="http://mbsy.co/onemonth/10032515">One Month Stripe Payments has been released</a>. I finished it in a week. </p>

<!-- more -->

<p>The finished product can be viwed <a href="http://calm-everglades-6719.herokuapp.com">here</a>. I edited a few things of course, I just wanted to get a feel of how things worked.</p>

<p>Now, I’m re-coding the project to make a website for a friend. You can follow along with the <a href="https://github.com/abustamam/stuart_welch">Github repo</a></p>

<p>First, to start, I learned something the hard way. Make sure that your project path does not contain any spaces. After probably hours of troubleshooting, I finally elected to change my <code>Rails projects</code> directory to <code>Rails_Projects</code> and everything worked fine. So don’t make my mistake!</p>

<p>Second, here are a list of things you should know about the app:</p>

<ul>
  <li>Ruby version: 2.1.0</li>
  <li>Rails version: 4.1.1</li>
  <li>Using sqlite3 for development</li>
  <li>Using pg for production (in Heroku)</li>
  <li>Using haml</li>
</ul>

<p>You’re free to make the app in whichever way you’d like, of course. But this write-up will be following those constraints. Your Gemfile should look something like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class="line"><span class="n">source</span> <span class="s1">&#39;http://gems.github.com&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">ruby</span> <span class="s1">&#39;2.1.0&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Bundle edge Rails instead: gem &#39;rails&#39;, github: &#39;rails/rails&#39;</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;4.1.1&#39;</span>
</span><span class="line"><span class="c1"># Use sqlite3 as the database for Active Record in development and test</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="o">[</span><span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use postgres as the database in production</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;pg&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:production</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Add 12 factor for Heroku</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;rails_12factor&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:production</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use bootstrap</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;bootstrap-sass&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use SCSS for stylesheets</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;sass-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.0.3&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use Uglifier as compressor for JavaScript assets</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;uglifier&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.3.0&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use CoffeeScript for .js.coffee assets and views</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;coffee-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.0.0&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use figaro for securely managing credentials</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;figaro&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use jquery as the JavaScript library</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;jquery-rails&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Turbolinks makes following links in your web application faster. Read more: https://github.com/rails/turbolinks</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;turbolinks&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;jbuilder&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># bundle exec rake doc:rails generates the API under doc/api.</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;sdoc&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.4.0&#39;</span><span class="p">,</span>          <span class="ss">group</span><span class="p">:</span> <span class="ss">:doc</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;spring&#39;</span><span class="p">,</span>        <span class="ss">group</span><span class="p">:</span> <span class="ss">:development</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use haml</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;haml&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Add stripe for payment processing</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;stripe&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://github.com/stripe/stripe-ruby&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use letter opener in dev</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;letter_opener&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:development</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use Automated Admin System</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;activeadmin&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;gregbell/active_admin&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use devise</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;devise&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use ActiveModel has_secure_password</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;bcrypt&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.1.7&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Since we’re using <code>pg</code> instead of <code>sqlite3</code> as our database, let’s remove it from the production part of the database file.</p>

<p>Run <code>bundle install --without production</code> and you should be ready to run!</p>

<p>Go ahead and make your new rails app:</p>

<p><code>rails new stripe_payments</code></p>

<p>The first thing you’ll want to do is configure your home page. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/controllers/pages_controllers.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">PagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">home</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Quick way to do this is to run <code>rails g controller pages</code> and the <code>pages_controller.rb</code> file will automatically be generated. </p>

<p>Make the routes point to it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class="line">  <span class="n">root</span> <span class="s1">&#39;pages#home&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, create your home page. Remember I’ll be using HAML. The tutorial uses ERB. Use whichever suits your fancy.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/views/pages/home.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">Hello world!
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>At this point in the One Month Stripe Payments Tutorial, Chris “steals” (I mean borrows!) his own design from another one of his repositories. Of course there’s nothing wrong with it, since he’s using his own design. The next couple of days are focused on establishing the functionality of the page that it’s supposed to have. That being said, let’s just copy the finalized design and skip the legwork.</p>

<p>Here are the files you’ll want to look out for:</p>

<ul>
  <li>app/views/layouts/application.html.haml</li>
  <li>app/views/pages/home.html.haml</li>
  <li>app/assets/ (everything inside)</li>
  <li>config/environment/production.rb </li>
</ul>

<p>In that last file, the following changes were necessary:</p>

<ul>
  <li>Change <code>config.assets.compile</code> to <code>true</code></li>
  <li>Uncomment <code>config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect'</code></li>
  <li>Change <code>config.assets.digest</code> to <code>true</code></li>
</ul>

<p>This was to make the assets work on Heroku.</p>

<p>Again, here is the <a href="https://github.com/abustamam/stuart_welch">Github repo</a>.</p>

<p>All in a day’s work right? Tomorrow we’ll finish adding Stripe functionality and we’ll be done, hopefully!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code School Angular JS: Part 1]]></title>
    <link href="http://abustamam.github.io/blog/2014/08/06/angular-code-school/"/>
    <updated>2014-08-06T20:36:54-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/08/06/angular-code-school</id>
    <content type="html"><![CDATA[<p>I’ve been going through the <a href="http://campus.codeschool.com/courses/shaping-up-with-angular-js/">Shaping Up with AngularJS</a> 
course and decided to share a bit about what I’ve been learning. </p>

<!--more-->

<p>I feel the best way to learn is to teach. So I’m doing a write-up of the course, adding in some explanations for the
challenges, and adding some mini-assignments to keep you on your toes, and for you to check your own understanding. </p>

<p>This write-up is not meant to be a replacement for the Code School course; but merely a companion. That being said, 
it’s also written textbook-style–if you have this document with you, you can read through it and test yourself 
pretty easily. If you have pen and paper, you can also do all of the challenges. No need for an interpreter or 
anything. The challenges and mini-assignments are small enough for you to be able to write everything down, simply to
test your understanding. </p>

<p>This is part 1 of the series, which will go over installing Angular (and Bootstrap) and setting up our first controller.</p>

<p>If you want to be able to share your project, go ahead and do Lesson 0; if you just want to run the app locally on your
machine, skip to Lesson 1. Code School does not go over deploying git, so it might be helpful to follow along. </p>

<p><a href="#tldr">TL;DR</a></p>

<h2 id="lesson--1-what-is-angular">Lesson -1: What is Angular?</h2>

<p>Angular is…</p>

<blockquote>
  <p>A client-side Javascript framework for adding interactivity to HTML.</p>
</blockquote>

<p>Angular uses a couple of things in order to achieve this–Directives, and Modules.</p>

<blockquote>
  <p>A Directive is a marker on a HTML tag that tells Angular to run or reference some JavaScript code.</p>
</blockquote>

<p>Basically, it’s an HTML property. It looks something similar to this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Directive example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;body</span> <span class="na">ng-controller =</span><span class="err"> </span><span class="s">&quot;StoreController&quot;</span><span class="nt">&gt;&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>ng-controller</code> bit is the <code>directive</code>.</p>

<p>A <code>module</code> is where we write pieces of our application. Then we join them together like Lego.</p>

<p>Using modules allows us to write testable, readable code. It also defines dependencies, as modules can use other
modules! </p>

<p>Now that you know what Angular is in a nutshell, continue on to set it up!</p>

<h2 id="lesson-0-set-up-angular-and-bootstrap">Lesson 0: Set up Angular and Bootstrap</h2>

<p>This step can be tricky, since there are a few ways to install Angular and Bootstrap. </p>

<h3 id="the-easy-way-using-cdn">The easy way: using CDN</h3>

<p>You can simply add the following code to your <code>head</code>:</p>

<pre><code>&lt;script type='text/javascript' src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.21/angular.min.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css"&gt;
</code></pre>

<p>Keep in mind that the code will not work locally unless you type <code>http:</code> before all of that.</p>

<h3 id="the-hard-way-using-bower">The hard way: using Bower</h3>

<p>Okay, the hard way isn’t really that hard, it just requires you to install Node/npm, then <code>npm install -g bower</code>, then 
<code>bower install bootstrap</code> and <code>bower install angular</code>. I won’t go into that since it’s not the purpose of this post,
but feel free to reach out if you get stuck. </p>

<p>Your assets will then be thrown into <code>/bower_components</code> so make sure that your <code>head</code> reflects that.</p>

<h3 id="deploying-live">Deploying live</h3>

<p>In your command line, just type <code>git init</code> and follow GitHub’s instructions to push your code up! </p>

<p>If you want to deploy it live, then create a new branch called <code>gh-pages</code>:</p>

<pre><code>$ git co -b gh-pages
</code></pre>

<p>And then commit everything, and when you go to <code>[your_username].github.io/[your_project_name]</code> it will be live.</p>

<p>If you need additional info feel free to drop a line! </p>

<p>Mine is currently <a href="http://abustamam.github.io/FlatLanders">here</a>.</p>

<h2 id="lesson-1-setting-up-appjs-indexhtml-and-our-first-controller">Lesson 1: Setting up <code>app.js</code>, <code>index.html</code> and our first controller</h2>

<p>The goal for this course is to make an app so that the Flat Landers can sell some gems! Hey, I don’t make the 
stories here. So let’s get our storefront set up and ready for money! </p>

<h3 id="your-first-module">Your first module</h3>

<p>Create two new files; <code>app.js</code> and <code>index.html</code>. </p>

<p>The first thing we need to do is create our first module! This is simple. Add the following to <code>app.js</code>:</p>

<pre><code>var app = angular.module('gemStore',[]);
</code></pre>

<p>Okay, we’ve created our module. Now we need to <em>bind</em> it to our html.</p>

<p>Begin your <code>index.html</code> like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&#39;gemStore&#39;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;head&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- link and script tags may vary depending on how you decided to obtain bootstrap and angular --&gt;</span>
</span><span class="line">    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;bootstrap.min.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">  <span class="nt">&lt;/head&gt;</span>
</span><span class="line">  <span class="nt">&lt;body&gt;</span>
</span><span class="line">    <span class="nt">&lt;h1&gt;&lt;/h1&gt;</span>
</span><span class="line">  <span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice the new <code>ng-app</code> property in the <code>html</code> tag. This is a <code>directive</code> in Angular. Get used
to using them; it’s how we’ll be ‘attaching’ things to HTML. Eventually we’ll be making our own custom directives,
but for now we’ll use some built-in ones. </p>

<p>You can name your <code>ng-app</code> whatever you want, as long as it matches 
the <code>app</code> variable in in <code>app.js</code>!</p>

<p>And there you have it! You are now running Angular. You don’t need to use a server in order to view how things look. 
You can simply preview <code>index.html</code> in your browser. </p>

<p>To test it out, go ahead and write some code between the <code>h1</code>s:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span>app.js</span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="javascript"><span class="line"><span class="p">...</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class="line"><span class="p">...</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>Now, you can run JavaScript code between double curly-braces! Try different things out! </p>

<h3 id="your-first-controller">Your first controller</h3>

<p>We’re making a Gem store. So, we need some Gems to sell! </p>

<p>We’re going to update our <code>app.js</code> to do a couple of things. First, we’re going to wrap everything into a closure like 
so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="nx">code</span>
</span><span class="line"><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can’t have a store without stuff to sell, so now, we’re going to add stuff to sell! Let’s create a gem. Right now, we want to keep things simple, so let’s
just make it so our gem has a Name and a Price. Bringing the basics back to shopping! </p>

<p>The gem will go within the anonymous function. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">gem</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Azurite&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">price</span><span class="o">:</span> <span class="mf">2.95</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a name="mini1"></a></p>

<h4 id="mini-assignment-1-see-if-you-can-add-a-description-property-to-the-gem-variable">Mini-assignment 1: see if you can add a description property to the <code>gem</code> variable!</h4>
<p><a href="#minisol1">Click for answer</a></p>

<p>But how do we get data from the gem onto the page?</p>

<p>That’s where controllers come in.</p>

<h4 id="whats-a-controller">What’s a controller?</h4>

<p>Good question. </p>

<p>According to Code School, </p>

<blockquote>
  <p>Controllers are where we define our app’s behavior by defining functions and values</p>
</blockquote>

<p>Basically, it’s a way for us to <em>abstract</em> the programming logic from the page into our script.
Thus, we can grab functions and values from <code>app.js</code> and insert them directly into our <code>index.html</code> page. </p>

<p>First, we gotta make our controller. The code for a controller is simply:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Controller Creation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;[ControllerName]&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">property</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Keep in mind that everything you write in the controller belongs to the <em>scope</em> of the controller. I sometimes forgot
that, so watch out! </p>

<p>Second, you need to <em>bind</em> the controller to your html. This takes place with a <code>directive</code>!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Controller Binding</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;tag</span> <span class="na">ng-controller =</span><span class="err"> </span><span class="s">&quot;[ControllerName] as [Alias]&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;/tag&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You need to create an alias for the controller in order to use it. It doesn’t matter what the alias name is, as long
as you use the alias.</p>

<p>Before we move on, let’s try these mini-assignments first. </p>

<p><a name="mini2"></a></p>

<h4 id="mini-assignment-2-how-would-you-create-a-controller-called-storecontroller">Mini-assignment 2: How would you create a controller called ‘StoreController’?</h4>
<p><a href="#minisol2">Click for answer</a></p>

<p><a name="mini3"></a></p>

<h4 id="mini-assignment-3-how-would-you-bind-the-controller-to-a-body-tag-with-alias-of-store">Mini-assignment 3: How would you bind the controller to a <code>body</code> tag with alias of ‘Store’?</h4>
<p><a href="#minisol3">Click for answer</a></p>

<p>Should have been pretty easy for a smart cookie like you!</p>

<p>You can bind the controller to any tag, but you won’t be able to use the controller outside the scope of the tag. So
consider the following example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Controller Example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;section</span> <span class="na">id =</span><span class="s">&quot;works&quot;</span> <span class="na">ng-controller =</span><span class="err"> </span><span class="s">&quot;StoreController as store&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;foo&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/section&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;section</span> <span class="na">id =</span><span class="err"> </span><span class="s">&quot;nowork&quot;</span> <span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;bar&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Anything within the <code>works</code> section will parse properly. Anything within the <code>nowork</code> section will not parse. </p>

<h3 id="built-in-directives">Built-in directives</h3>

<p>Remember, we can think of a <code>directive</code> as an html tag property that extracts data from our JavaScript. Luckily, 
Angular comes with some built-in directives. Eventually, we’ll be making our own directives, but you gotta start
somewhere!</p>

<p>We’re running a store, and a store has physical quantities. 
If we run out, customers should not be able to purchase! Let’s take care of this functionality.</p>

<p>First, let’s update our Gem to have a couple more properties:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">...</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">gem</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Azurite&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">price</span><span class="o">:</span> <span class="mf">110.50</span><span class="p">,</span>
</span><span class="line">    <span class="nx">canPurchase</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">    <span class="nx">soldOut</span><span class="o">:</span> <span class="kc">true</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The key names should be self-evident.</p>

<p>I’m going to introduce you to a couple of built-in directives: <code>ng-show</code> and <code>ng-hide</code>. </p>

<p>Let’s go over briefly how to use these two directives. <code>ng-show</code> and <code>ng-hide</code> work similarly; with <code>ng-show</code> the tag
will never display unless the code in the directive evaluates to true, and with <code>ng-hide</code> the tag will always display
unless the code in the directive evaluates to true. </p>

<p>That being said, try this mini-assignment to test your wits!</p>

<p><a name="mini4"></a></p>

<h4 id="mini-assignment-4-which-tags-will-display-which-will-be-hidden">Mini-assignment 4: Which tags will display? Which will be hidden?</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>mini-assignment 4-1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;store.product.canPurchase&quot;</span><span class="nt">&gt;</span> Add to Cart <span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>mini-assignment 4-2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">ng-hide=</span><span class="s">&quot;store.product.soldOut&quot;</span><span class="nt">&gt;</span> Add to Cart <span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>mini-assignment 4-3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;store.product.soldOut&quot;</span><span class="nt">&gt;</span> Add to Cart <span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>mini-assignment 4-4</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">ng-hide=</span><span class="s">&quot;store.product.canPurchase&quot;</span><span class="nt">&gt;</span> Add to Cart <span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hint: keep in mind that <code>canPurchase</code> is <code>false</code>, and <code>soldOut</code> is <code>true</code>.</p>

<p><a href="#minisol4">Click for answer</a></p>

<p>Great work! </p>

<p>Now try this challenge! </p>

<p><a name="mini5"></a></p>

<h4 id="mini-assignment-5-use-directives-to-achieve-the-following-goals-for-the-following-code">Mini-assignment 5: Use directives to achieve the following goals for the following code:</h4>

<ul>
  <li>Button will not show when the product’s <code>canPurchase</code> property is <code>false</code></li>
  <li>.product div will not show when the product’s <code>soldOut</code> property is <code>true</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>mini-assignment 5</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;product row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;h3&gt;</span>
</span><span class="line">    
</span><span class="line">    <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>$<span class="nt">&lt;/em&gt;</span>
</span><span class="line">  <span class="nt">&lt;/h3&gt;</span>
</span><span class="line">  <span class="nt">&lt;button&gt;</span>Add to Cart<span class="nt">&lt;/button&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="#minisol5">Click for answer</a></p>

<h3 id="do-it-again-and-again-and-again-and">Do it again and again and again and…</h3>

<p>We’re running a store. A store with only one thing to be sold is kind of boring. Let’s add a few more gems, like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">...</span>
</span><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;StoreController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">   <span class="k">this</span><span class="p">.</span><span class="nx">products</span> <span class="o">=</span> <span class="nx">gems</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">gems</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Azurite&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">2.95</span> <span class="p">},</span>
</span><span class="line">    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bloodstone&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">5.95</span> <span class="p">},</span>
</span><span class="line">    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Zircon&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">3.95</span> <span class="p">},</span>
</span><span class="line">  <span class="p">];</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we have an array of <code>gems</code>: so, in order to get, let’s say, Azurite, we’ll reference it by its index number. In 
<code>index.html</code> we’ll reference it like so:
    store.products.gems[0]</p>

<p>So in order to format that into a <code>div</code>, with name and price, we’ll do it like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;product row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;h3&gt;</span>
</span><span class="line">    
</span><span class="line">    <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>$<span class="nt">&lt;/em&gt;</span>
</span><span class="line">  <span class="nt">&lt;/h3&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One down, two to go! </p>

<p>Our <code>index.html</code> will end up looking something like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;StoreController as store&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;product row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;h3&gt;</span>
</span><span class="line">        
</span><span class="line">        <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>$<span class="nt">&lt;/em&gt;</span>
</span><span class="line">      <span class="nt">&lt;/h3&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;product row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;h3&gt;</span>
</span><span class="line">        
</span><span class="line">        <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>$<span class="nt">&lt;/em&gt;</span>
</span><span class="line">      <span class="nt">&lt;/h3&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;product row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;h3&gt;</span>
</span><span class="line">        
</span><span class="line">        <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>$<span class="nt">&lt;/em&gt;</span>
</span><span class="line">      <span class="nt">&lt;/h3&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ugh… isn’t that annoying? This is like, anti-DRY. </p>

<p>Luckily, Angular has a built-in directive that allows us to <em>not</em> repeat ourselves. It’s aptly called, <code>ng-repeat</code>,
and work similarly to how Python loops work (if you’re familiar with that).</p>

<p>All we do is alias each recurring ‘thing’. If <code>foo</code> were an array of objects…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>foo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;FooController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">   <span class="k">this</span><span class="p">.</span><span class="nx">baz</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">    <span class="p">{</span> <span class="nx">prop1</span><span class="o">:</span> <span class="s2">&quot;cool&quot;</span><span class="p">,</span>
</span><span class="line">      <span class="nx">prop2</span><span class="o">:</span> <span class="s2">&quot;neat&quot;</span>
</span><span class="line">    <span class="p">},</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">prop1</span><span class="o">:</span> <span class="s2">&quot;awesome&quot;</span><span class="p">,</span>
</span><span class="line">      <span class="nx">prop2</span><span class="o">:</span> <span class="s2">&quot;gnarly&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The following expression will iterate through each value in the <code>foo</code> array:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bar in FooController</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;a</span> <span class="na">ng-repeat =</span><span class="err"> </span><span class="s">&quot;bar in FooController.baz&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;h1&gt;</span>bar.prop1<span class="nt">&lt;/h1&gt;</span>
</span><span class="line"><span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This will create an <code>&lt;a&gt;</code> tag for each element in <code>FooController.baz</code> (which is the <code>foo</code> array of objects we created).</p>

<p>Makes things a lot simpler, huh? </p>

<p>Let’s take this to our store. Try the Mini-Assignment.</p>

<p><a name="mini6"></a></p>

<h4 id="mini-assignment-6-use-ng-repeat-to-make-the-following-html-code-dry">Mini-assignment 6: Use ng-repeat to make the following html code DRY:</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">...</span>
</span><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;StoreController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">   <span class="k">this</span><span class="p">.</span><span class="nx">products</span> <span class="o">=</span> <span class="nx">gems</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">gems</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Azurite&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">2.95</span> <span class="p">},</span>
</span><span class="line">    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bloodstone&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">5.95</span> <span class="p">},</span>
</span><span class="line">    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Zircon&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">3.95</span> <span class="p">},</span>
</span><span class="line">  <span class="p">];</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;StoreController as store&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;product row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;h3&gt;</span>
</span><span class="line">        
</span><span class="line">        <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>$<span class="nt">&lt;/em&gt;</span>
</span><span class="line">      <span class="nt">&lt;/h3&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;product row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;h3&gt;</span>
</span><span class="line">        
</span><span class="line">        <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>$<span class="nt">&lt;/em&gt;</span>
</span><span class="line">      <span class="nt">&lt;/h3&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;product row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;h3&gt;</span>
</span><span class="line">        
</span><span class="line">        <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>$<span class="nt">&lt;/em&gt;</span>
</span><span class="line">      <span class="nt">&lt;/h3&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="#minisol6">Click for answer</a></p>

<p>Got the assignment? Here’s a recap of what we’ve learned so far…</p>

<p><a name="tldr"></a></p>

<h3 id="tldr">TL;DR</h3>

<ul>
  <li>A directive is an marker on an HTML tag that tells Angular to run or reference some JavaScript code.</li>
  <li>A controller is where we define our app’s behavior, and is bound to the HTML by using <code>ng-controller</code>
    <ul>
      <li>The expression matched to <code>ng-controller</code> should match the format: <code>"[ControllerName] as [Alias]"</code> and you will
use the alias to reference the controller throughout.</li>
    </ul>
  </li>
  <li>Some built-in directives are <code>ng-hide</code>, <code>ng-show</code>, and <code>ng-repeat</code>. </li>
</ul>

<p>Okay, neat! Your final code should look something like this. Make sure your code matches before moving onto part 2!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;gemStore&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;StoreController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">   <span class="k">this</span><span class="p">.</span><span class="nx">products</span> <span class="o">=</span> <span class="nx">gems</span><span class="p">;</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">gems</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Azurite&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">2.95</span> <span class="p">},</span>
</span><span class="line">    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bloodstone&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">5.95</span> <span class="p">},</span>
</span><span class="line">    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Zircon&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">3.95</span> <span class="p">},</span>
</span><span class="line">  <span class="p">];</span>
</span><span class="line"><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;gemStore&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;head&gt;</span>
</span><span class="line">    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;bootstrap.min.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">  <span class="nt">&lt;/head&gt;</span>
</span><span class="line">  <span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;StoreController as store&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">ng-repeat =</span><span class="err"> </span><span class="s">&quot;product in store.products&quot;</span> <span class="na">class=</span><span class="s">&quot;product row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;h3&gt;</span>
</span><span class="line">        
</span><span class="line">        <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>$<span class="nt">&lt;/em&gt;</span>
</span><span class="line">      <span class="nt">&lt;/h3&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line">  <span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: the <code>head</code> in <code>index.html</code> may vary depending on how you set up bootstrap and Angular. </p>

<h2 id="assignment-solutions">Assignment Solutions</h2>

<p><a name="minisol1"></a></p>

<h3 id="assignment-1">Assignment 1</h3>

<p>Properties in an object literal is just key: val. Don’t forget to put a comma!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Mini-Assignment 1 Solution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">gem</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Azurite&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">price</span><span class="o">:</span> <span class="mf">2.95</span><span class="p">,</span>
</span><span class="line">    <span class="nx">description</span><span class="o">:</span> <span class="s2">&quot;This is the best gem!&quot;</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><a href="#mini1">Back to assignment</a></p>

<p><a name="minisol2"></a></p>

<h3 id="assignment-2">Assignment 2</h3>

<p>Following the controller definition specs, all we do is use <code>app.controller</code>, passing in ‘StoreController’ and an
anonymous function with the controller properties.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Mini-Assignment 2 Solution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;StoreController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">product</span> <span class="o">=</span> <span class="nx">gem</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><a href="#mini2">Back to assignment</a></p>

<p><a name="minisol3"></a></p>

<h3 id="assignment-3">Assignment 3</h3>

<p>All we do is add an html property to the <code>body</code> tag, and use the <code>Controller as Alias</code> format to bind it. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Mini-Assignment 3 Solution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;body</span> <span class="na">ng-controller =</span><span class="err"> </span><span class="s">&quot;StoreController as store&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><a href="#mini3">Back to assignment</a></p>

<p><a name="minisol4"></a></p>

<h3 id="assignment-4">Assignment 4</h3>

<p>Only examples <code>3</code> and <code>4</code> will display. Remember that <code>ng-show</code> tags will only show if the statement 
evaluates to <code>true</code>. <code>ng-hide</code> tags will only hide if the statement evaluates to <code>true</code>. </p>

<p><a href="#mini4">Back to assignment</a></p>

<p><a name="minisol5"></a></p>

<h3 id="assignment-5">Assignment 5</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Mini-Assignment 5 Solution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">ng-hide=</span><span class="s">&quot;store.product.soldOut&quot;</span> <span class="na">class=</span><span class="s">&quot;product row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;h3&gt;</span>
</span><span class="line">    
</span><span class="line">    <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>$<span class="nt">&lt;/em&gt;</span>
</span><span class="line">  <span class="nt">&lt;/h3&gt;</span>
</span><span class="line">  <span class="nt">&lt;button</span> <span class="na">ng-show=</span><span class="s">&quot;store.product.canPurchase&quot;</span><span class="nt">&gt;</span>Add to Cart<span class="nt">&lt;/button&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="#mini5">Back to assignment</a></p>

<p><a name="minisol6"></a></p>

<h3 id="assignment-6">Assignment 6</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;StoreController as store&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">ng-repeat =</span><span class="err"> </span><span class="s">&quot;product in store.products&quot;</span> <span class="na">class=</span><span class="s">&quot;product row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;h3&gt;</span>
</span><span class="line">    
</span><span class="line">    <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>$<span class="nt">&lt;/em&gt;</span>
</span><span class="line">  <span class="nt">&lt;/h3&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="#mini6">Back to assignment</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing Theme With Octopress and Jekyll Asset Pipeline]]></title>
    <link href="http://abustamam.github.io/blog/2014/07/31/implementing-theme-with-octopress-and-jekyll-asset-pipeline/"/>
    <updated>2014-07-31T11:32:53-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/07/31/implementing-theme-with-octopress-and-jekyll-asset-pipeline</id>
    <content type="html"><![CDATA[<p>The purpose of this post is simple. </p>

<p>Octopress does not have much documentation on installing themes. I know it is not the developer way to install a theme,
but it is the developer way to create themes. </p>

<p>Here is what I’ve learned while trying to import a Start Bootstrap theme to Octopress. </p>

<!-- more -->

<p>First, get to know the <code>rake install[optional theme name]</code> command. It’s actually the first task in the Rakefile:</p>

<pre><code>desc "Initial setup for Octopress: copies the default theme into the path of Jekyll's generator. Rake install defaults to rake install[classic] to install a different theme run rake install[some_theme_name]"
task :install, :theme do |t, args|
  if File.directory?(source_dir) || File.directory?("sass")
    abort("rake aborted!") if ask("A theme is already installed, proceeding will overwrite existing files. Are you sure?", ['y', 'n']) == 'n'
  end
  # copy theme into working Jekyll directories
  theme = args.theme || 'classic'
  puts "## Copying "+theme+" theme into ./#{source_dir} and ./sass"
  mkdir_p source_dir
  cp_r "#{themes_dir}/#{theme}/source/.", source_dir
  mkdir_p "sass"
  cp_r "#{themes_dir}/#{theme}/sass/.", "sass"
  mkdir_p "#{source_dir}/#{posts_dir}"
  mkdir_p public_dir
end
</code></pre>

<p>What it does is scour the ./.themes directory and copies all the files from the <code>/source</code> and the <code>/sass</code> directories
into the root. </p>

<p>Thus, a complete theme must contain <code>/source</code> and <code>/sass</code> directories. </p>

<p>From there, if you run <code>rake generate</code> it will process the sourcefiles and build the site.</p>
]]></content>
  </entry>
  
</feed>
