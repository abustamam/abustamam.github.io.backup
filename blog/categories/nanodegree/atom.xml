<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nanodegree | Write Bright]]></title>
  <link href="http://abustamam.github.io/blog/categories/nanodegree/atom.xml" rel="self"/>
  <link href="http://abustamam.github.io/"/>
  <updated>2015-06-18T05:39:05-07:00</updated>
  <id>http://abustamam.github.io/</id>
  <author>
    <name><![CDATA[Rasheed Bustamam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript Design Patterns Reflections]]></title>
    <link href="http://abustamam.github.io/blog/2015/02/08/javascript-design-patterns-reflections/"/>
    <updated>2015-02-08T16:14:46-08:00</updated>
    <id>http://abustamam.github.io/blog/2015/02/08/javascript-design-patterns-reflections</id>
    <content type="html"><![CDATA[<h1 id="rundown">Rundown</h1>

<p>This course focuses on Javascript design patterns. It takes us through several simple projects for the sake of learning good design patterns. I will post my brief reflections of each project here. </p>

<!-- more -->

<h1 id="cat-clicker">Cat Clicker</h1>

<p><a href="/Cat-Clicker">Cat Clicker</a> was my first project. </p>

<h2 id="version-01">version 0.1</h2>

<p>Has one single cat. It was very easy to set up, just getting the structure of the HTML page I need to get used to. </p>

<p>I feel pretty good about my code, even though it’s not “beautiful.”</p>

<p>I clicked my cat probably 10 times to test functionality. </p>

<h2 id="version-02">version 0.2</h2>

<p>Since the HTML skeleton is already available for me, I merely dumped both cats into a <code>#cats div</code> and added a class for each cat. </p>

<p>I still feel good about my code, though it’s still not beautiful. </p>

<p>Clicked probably another 10 times to test functionality. </p>

<h2 id="version-03">version 0.3</h2>

<p>Finally, I added 5 cats, and each cat has its own click-counter. </p>

<p>It took WAY too long for me to figure out how to do it, but using classes seemed to be the way to go. Now, as long as I have the pics, I am able to add as many cats as I want!</p>

<h2 id="version-04">version 0.4</h2>

<p>Using MVO, I was able to abstract my code to separate concerns. However, in simplifying my Model, I introduced a bug (which I will fix)…</p>

<ul>
  <li>
    <p>When opening app for the first time and clicking on kitten 0 a few times, switching to one kitten then back to kitten 0 resets kitten 0 back to 0 clicks, first time only. Cause is likely currentCat.</p>
  </li>
  <li>
    <p>When clicking reset button, and switching to another cat that has clicks (without refreshing), cat will still display its old number of clicks. A refresh will fix this. Cause is likely the fact that switching cats uses a copy of currentCat, and the copy’s clicks are not reset. Since the scope of the cat copy is limited to the IIFE, I will try to determine a workaround. </p>
  </li>
</ul>

<h2 id="version-04b">version 0.4b</h2>

<p>Bugfix: all kitten data are synced with local storage (saves on each click)
Bugfix: Reset button works properly</p>

<h2 id="version-05">version 0.5</h2>

<p>Add admin panel, which allows “cheating” (aka changing number of clicks)</p>

<h2 id="version-1">version 1</h2>

<p>Uses knockout.js, looks cool</p>

<h1 id="school-attendance-app">School-Attendance App</h1>

<p>Original Udacity repo is <a href="https://github.com/udacity/ud989-school-attendance">here</a>. My repo is <a href="https://github.com/abustamam/school-attendance">here</a>.</p>

<p>The goal of this app is to refactor existing code from spaghetti code into maintainable code using MVO, which was done pretty easily. The model was the list of students and the days they missed. The view was how the app looks. And the octopus was what bound everything together. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing a Portfolio]]></title>
    <link href="http://abustamam.github.io/blog/2015/01/20/optimizing-a-portfolio/"/>
    <updated>2015-01-20T11:50:41-08:00</updated>
    <id>http://abustamam.github.io/blog/2015/01/20/optimizing-a-portfolio</id>
    <content type="html"><![CDATA[<h1 id="heres-the-latest">Here’s the latest</h1>

<p>The latest project was to optimize a portfolio. Once I get the project graded, I will update the <a href="/mobile-portfolio">portfolio</a> to be my own. However, here are some take-home points I got.</p>

<!-- more -->

<h2 id="the-course">The course</h2>

<p><a href="https://www.udacity.com/course/viewer#!/c-ud884-nd">The course</a> itself wasn’t bad. However, it definitely wasn’t interesting. </p>

<p>The course focused on the Critical Rendering Path (CRP) and how to optimize it. However, I felt it didn’t go into specifics, like how to optimize above-the-fold CSS. I had to look at resources elsewhere to learn what that was. </p>

<p>Aside from all that, I did learn a lot from the course, but I feel I learned more from the <a href="https://developers.google.com/web/fundamentals/">Google web fundamentals</a> guide (incidentally, written by one of the lecturers in the course!).</p>

<h2 id="the-project">The project</h2>

<p>The project was to optimize <a href="github.com/udacity/frontend-nanodegree-mobile-portfolio">this portfolio</a> in two primary ways.</p>

<p>The first goal was to optimize the website such that it got a score of 90+ on <a href="https://developers.google.com/speed/pagespeed/insights/?url=abustamam.github.io%2Fmobile-portfolio">Page Speed Insights</a>. This was done by analyzing the CRP and performing optimizations such as inlining critical CSS and async-ing non-critical scripts. </p>

<p>The second goal was to optimize the <a href="mobile-portfolio/pizza.html">pizza page</a> such that it ran at 60 FPS. This was done by performing several JavaScript optimizations.</p>

<p>The main issue I ran into with the project was the task automaters (more on this <a href="#gulp">below</a>).</p>

<p>The project itself was pretty simple. In fact, though I thought the project would be incredibly boring (make one change, measure, make another change, measure) it certainly wasn’t that. </p>

<p>Granted, I did need to measure the results of each change I made, but it wasn’t terrible. In fact, my task-runner did most of the work for me. I just made sure that all my tasks were written correctly. </p>

<p>The second part of the project was optimizing the JavaScript.</p>

<p>The tough part about this was that I didn’t know too much about requestAnimationFrame. So I learned! And that’s what life is all about. So I learned about the rAF, and used it to optimize my JavaScript.</p>

<p>Also, I moved variable declarations outside of functions/for loops, if the variables were constant throughout. For example, there will always be x number of pizzas, so why not push that into a variable and iterate over that array? Fewer calculations = better performance.</p>

<h2 id="using-gulpjs">Using Gulp.js</h2>

<p>I must admit, I started using Grunt first. Then I learned about Gulp and decided to try it out. </p>

<p>Both of them looked incredibly complicated, but as I played around with them I learned a lot about them, and also about node.js. Though they seemed complicated, they really weren’t. </p>

<p>Since I ended up using Gulp, I won’t talk about Grunt. </p>

<p>With Gulp, all you do is pipe streams of data around. You start with a source, and then you perform a ‘task’ on it, and you can do whatever you want with the result of that task (even perform another task on it).</p>

<p>When you write your own tasks, you can add task dependencies:</p>

<p>```
gulp.task(‘one’, function(){
  // do something
});</p>

<p>gulp.task(‘two’, [‘one’], function(){
  // do another thing
});</p>

<p>gulp.task(‘three’, [‘one’], function(){
  // do something else
});</p>

<p>gulp.task(‘default’, [‘two’, ‘three’]);
```</p>

<p>The above code has a default task <code>default</code>, which depends on ‘two’ and ‘three’. Since both of them depend on ‘one’, ‘one’ must finish before ‘two’ or ‘three’ begin. However, even though both of them depend on ‘one’, ‘one’ is only run once. Neat huh? </p>

<p>I used this to ‘clean’ before minification. Each minification task depended on <code>clean</code>, which was run before any minification task. So my bulk-minification task <code>minify</code> ran clean before running any single minification task. Very handy! </p>

<p>Now, back to the issues I ran into.</p>

<p><a name="gulp"></a>
### Imagemin images can’t be huge</p>

<p>The first main issue was with <code>imagemin</code> which is a great tool, but there was a weird problem.</p>

<p>It was failing with a strange error. </p>

<p>So I did some trial and error by removing certain files, and I found out that it didn’t fail when I took out the huge ‘pizzaria’ image file. </p>

<p>I surmised this was because the pizzaria image file was so big, it killed imagemin. So I deleted it, and this worked fine. </p>

<p>So that brings me to a lesson learned–sometimes you have to do trial-and-error to figure out what’s going wrong. </p>

<h3 id="dont-forget-to-change-sources">Don’t forget to change sources!</h3>

<p>To simplify my app, I moved all html files to the base (build), and all assets into their respective folders (i.e. img, css, js). I was running into so many errors when I was trying to optimize my pizza page.</p>

<p>It turns out that it was calling the wrong css file! </p>

<p>So if you’re going to restructure your app’s directory, make sure that you double check each page’s resources! </p>

<h2 id="moral-of-the-story">Moral of the story</h2>

<p>I learned a lot in this project, namely for task automation. Gulp is definitely a godsend when it comes to optimization, so I was happy to learn it. It took a while, but I finally got it down, and it was awesome! </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Re)making the Frogger Game]]></title>
    <link href="http://abustamam.github.io/blog/2014/12/17/re-making-the-frogger-game/"/>
    <updated>2014-12-17T13:40:50-08:00</updated>
    <id>http://abustamam.github.io/blog/2014/12/17/re-making-the-frogger-game</id>
    <content type="html"><![CDATA[<h1 id="six-weeks-later">Six weeks later</h1>

<p>I’m back, and I’ve finally finished my game project, using HTML5 Canvas and JS. You can view the finished project <a href="/bugger">here</a>. </p>

<!-- more -->

<p>The courses used were <a href="https://www.udacity.com/course/viewer#!/c-ud292-nd">HTML5 Canvas</a> and <a href="https://www.udacity.com/course/viewer#!/c-ud015-nd">Object-oriented Javascript</a>.</p>

<p>I learned a lot while working through this project. Not only about programming, but also about motivation and getting things done. </p>

<h2 id="when-youre-stuck">When you’re stuck…</h2>

<p>I learned that when you’re stuck, just go with your “gut feeling” and see if it works. If it doesn’t work, check the errors, and see if you can fix what you broke. </p>

<p>Always always <em>always</em> work one change at a time if you’re “stuck,” unless of course you’re confident what you’re doing is going to work. Here’s an example…</p>

<p>At one point, I decided I wanted to add a character selection screen. Up until this point, the canvas was only drawing the main game. In order to add a character selection screen, I needed to add a new “screen.” To this effect, I decided to add a “game state” to the game, so that way the engine could track the state of the game and render appropriate content for its state. </p>

<p>Once I did that, I worked the start screen piece by piece. I started by drawing one character, then the Selector, and then I added more characters. Then I added the logic to the Selector class, and ensured that the Selector responded in the way I wanted it to. Then I ensured the Selector was passing in the chosen character data to the main game, so that it could render the correct character. </p>

<p>** Bug: Notice that when you choose one of the heroines on the right side, they start on the right side instead of in the middle. I am working on a fix for this. </p>

<p>I like to imagine development like Lego. You have a plethora of commands and methods at your disposal, you need to use your imagination and iteratively build upwards, until you get what you need. </p>

<h2 id="designing-your-code">Designing your code</h2>

<p>When you use function declarations…</p>

<p>function () {}</p>

<p>vs </p>

<p>var fn = function () {}</p>

<p>…Javascript does something known as “hoisting.” Function declarations are loaded <em>first</em>, so the order doesn’t really matter. </p>

<p>However, they <em>do</em> matter to you. When you’re looking for something that broke, or want to tweak something, you’ll want to find it quickly. So it’s important to have everything organized in a logical sense, using comments when necessary. As tempted as I was to haphazardly place prototypical functions wherever I wanted to, I made sure that the prototypical functions were neatly organized beneath their respective classes. Perhaps it was my OCD, but it made it immensely easy for me to find everything. </p>

<p>It also makes it easy for you to keep code in your head. </p>

<h2 id="mustering-motivation">Mustering motivation</h2>

<p>I’ve had the opportunity to work a lot of hours during this project. There were also a lot of family visits, and I managed to get sick twice. That made my motivation to code shot. </p>

<p>How did I get past humps? </p>

<p>First, I made a clean workstation. A workstation that is organized allows for an organized mind and thought process. I moved my desk around so it makes me feel like I’m in an office, so I’m tempted to work as if I were in an office. </p>

<p>Second, I made a list (mental or otherwise) of things I wanted to accomplish. What was my task for today? Was it to add collision detection? Was it to add winning conditions? Was it to add a start/game-over screen? I’d choose one task and hack at it. </p>

<p>Third, when I felt like I had momentum (or “flow”), I’d stop. This is effective because it allows for your brain to relax (e.g. not think about the problem at hand). The next day, I’d be motivated to pick back up where I started and continue my momentum.</p>

<p>Contrast this with following through with momentum. If the first task to do the next session is difficult, it’ll be hard to motivate yourself to do it. So if you make finishing the task easy and push it to the start of the next session, you’ll continue your momentum and be able to drive through the difficult task more easily. </p>

<p>And finally, no workstation is complete without a kitten on your lap.</p>

<h2 id="whats-next">What’s next?</h2>

<p>My next project is to learn website optimization. I’ll of course post my results of the next project when I’m done. </p>

<p>Til next time! </p>
]]></content>
  </entry>
  
</feed>
