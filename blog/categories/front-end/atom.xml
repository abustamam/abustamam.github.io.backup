<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Front-end, | Rasheed Bustamam Blogfolio]]></title>
  <link href="http://abustamam.github.io/blog/categories/front-end/atom.xml" rel="self"/>
  <link href="http://abustamam.github.io/"/>
  <updated>2014-12-17T14:34:19-08:00</updated>
  <id>http://abustamam.github.io/</id>
  <author>
    <name><![CDATA[Rasheed Bustamam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[(Re)making the Frogger Game]]></title>
    <link href="http://abustamam.github.io/blog/2014/12/17/re-making-the-frogger-game/"/>
    <updated>2014-12-17T13:40:50-08:00</updated>
    <id>http://abustamam.github.io/blog/2014/12/17/re-making-the-frogger-game</id>
    <content type="html"><![CDATA[<h1 id="six-weeks-later">Six weeks later</h1>

<p>I’m back, and I’ve finally finished my game project, using HTML5 Canvas and JS. You can view the finished project <a href="abustamam.github.io/frontend-nanodegree-arcade-game">here</a>. </p>

<p>The courses used were <a href="https://www.udacity.com/course/viewer#!/c-ud292-nd">HTML5 Canvas</a> and <a href="https://www.udacity.com/course/viewer#!/c-ud015-nd">Object-oriented Javascript</a>.</p>

<p>I learned a lot while working through this project. Not only about programming, but also about motivation and getting things done. </p>

<h2 id="when-youre-stuck">When you’re stuck…</h2>

<p>I learned that when you’re stuck, just go with your “gut feeling” and see if it works. If it doesn’t work, check the errors, and see if you can fix what you broke. </p>

<p>Always always <em>always</em> work one change at a time if you’re “stuck,” unless of course you’re confident what you’re doing is going to work. Here’s an example…</p>

<p>At one point, I decided I wanted to add a character selection screen. Up until this point, the canvas was only drawing the main game. In order to add a character selection screen, I needed to add a new “screen.” To this effect, I decided to add a “game state” to the game, so that way the engine could track the state of the game and render appropriate content for its state. </p>

<p>Once I did that, I worked the start screen piece by piece. I started by drawing one character, then the Selector, and then I added more characters. Then I added the logic to the Selector class, and ensured that the Selector responded in the way I wanted it to. Then I ensured the Selector was passing in the chosen character data to the main game, so that it could render the correct character. </p>

<p>** Bug: Notice that when you choose one of the heroines on the right side, they start on the right side instead of in the middle. I am working on a fix for this. </p>

<p>I like to imagine development like Lego. You have a plethora of commands and methods at your disposal, you need to use your imagination and iteratively build upwards, until you get what you need. </p>

<h2 id="designing-your-code">Designing your code</h2>

<p>When you use function declarations…</p>

<p>function () {}</p>

<p>vs </p>

<p>var fn = function () {}</p>

<p>…Javascript does something known as “hoisting.” Function declarations are loaded <em>first</em>, so the order doesn’t really matter. </p>

<p>However, they <em>do</em> matter to you. When you’re looking for something that broke, or want to tweak something, you’ll want to find it quickly. So it’s important to have everything organized in a logical sense, using comments when necessary. As tempted as I was to haphazardly place prototypical functions wherever I wanted to, I made sure that the prototypical functions were neatly organized beneath their respective classes. Perhaps it was my OCD, but it made it immensely easy for me to find everything. </p>

<p>It also makes it easy for you to keep code in your head. </p>

<h2 id="mustering-motivation">Mustering motivation</h2>

<p>I’ve had the opportunity to work a lot of hours during this project. There were also a lot of family visits, and I managed to get sick twice. That made my motivation to code shot. </p>

<p>How did I get past humps? </p>

<p>First, I made a clean workstation. A workstation that is organized allows for an organized mind and thought process. I moved my desk around so it makes me feel like I’m in an office, so I’m tempted to work as if I were in an office. </p>

<p>Second, I made a list (mental or otherwise) of things I wanted to accomplish. What was my task for today? Was it to add collision detection? Was it to add winning conditions? Was it to add a start/game-over screen? I’d choose one task and hack at it. </p>

<p>Third, when I felt like I had momentum (or “flow”), I’d stop. This is effective because it allows for your brain to relax (e.g. not think about the problem at hand). The next day, I’d be motivated to pick back up where I started and continue my momentum.</p>

<p>Contrast this with following through with momentum. If the first task to do the next session is difficult, it’ll be hard to motivate yourself to do it. So if you make finishing the task easy and push it to the start of the next session, you’ll continue your momentum and be able to drive through the difficult task more easily. </p>

<p>And finally, no workstation is complete without a kitten on your lap.</p>

<h2 id="whats-next">What’s next?</h2>

<p>My next project is to learn website optimization. I’ll of course post my results of the next project when I’m done. </p>

<p>Til next time! </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection on Nanodegree Pt 1]]></title>
    <link href="http://abustamam.github.io/blog/2014/10/31/reflection-on-nanodegree-pt-1/"/>
    <updated>2014-10-31T23:23:45-07:00</updated>
    <id>http://abustamam.github.io/blog/2014/10/31/reflection-on-nanodegree-pt-1</id>
    <content type="html"><![CDATA[<h2 id="udacity-nanodegree-overview">Udacity Nanodegree overview</h2>

<p>I’ve been plowing through <a href="https://www.udacity.com/course/nd001">Udacity’s Front-End Nanodegree program</a>. It’s a pilot program, designed to learn front-end web development from the ground up.</p>

<p>I started the day I was allowed to, which was about two weeks ago. </p>

<p>So far, I’ve completed the <a href="/Udacity-Portfolio">Mockup to Website</a>, and <a href="/frontend-nanodegree-resume">Interactive Resume</a>. </p>

<p>The courses are decent; I enjoy the byte-sized lectures interspersed with quizzes. The courses don’t go too deep, but that’s what the projects are for.</p>

<p>What you really get for the Nanodegree tuition is access to mentors and of course the certification. Since all of the coursework required to complete the projects is technically free on Udacity (which is really awesome of them!), we’re really just paying for the service of mentorship.</p>

<p>What I’ve come to realize is that many people lack mentors in life. They follow a pre-determined career path that includes university and internship, and they have a college advisor, but many times the advisor has not gone through the same path. Also, the advisor is not heavily emphasized, which I feel is a big mistake. </p>

<p>The best thing a student can have is a mentor, not only for the knowledge, but also the connections.</p>

<p>Given all of that, is Udacity worth the $200 a month? Well, I’m scheduled for my first 1-on-1 mentorship session next week, so only time will tell. </p>

<p>As I go through the program, I will continue posting updates and reflections about the program. </p>

<h2 id="the-actual-coursework">The actual coursework</h2>

<h3 id="project-1-mockup-to-website">Project 1: Mockup to Website</h3>

<p>The first course I took in the Nanodegree program was <a href="https://www.udacity.com/course/viewer#!/c-ud304">Intro to HTML and CSS</a>. This was billed to be “Not your average HTML and CSS course,” which I found to be interesting. I’ve taken countless HTML and CSS courses online, and most of them tend to be pretty much the same. They’re all good, but at the end, I couldn’t do much by myself. </p>

<p>By the end of the Udacity course, I was able to go from PDF mockup to website from scratch. It’s all an iterative process, which no other HTML course had ever told me. </p>

<p>Most other courses focused on syntax, which of course is important, but always left out design. Rather than having us create the site, they tell us what the numbers are, and we simply translate that to syntax. </p>

<p>Udacity ensured that we could do everything on our own, which is the definition of mastery. </p>

<p>So was it your average HTML and CSS course? No, definitely not. And since the course is free (remember, you pay for mentorship, not knowledge), I definitely recommend anyone new to web development to take this course.</p>

<p>As an aside, I really love the informal nature of the classes. I hate classes that take themselves too seriously. Learning shouldn’t be boring. Why shouldn’t the instructor throw random round objects at another instructor? </p>

<p>Granted, learning should be taken seriously, but it doesn’t need to be serious to be taken seriously. Having fun is important too, and nothing says we can’t have both!</p>

<h3 id="mini-project-learn-github">Mini-project: Learn Github</h3>

<p>What I like about the Nanodegree program so far is that it focuses on career development. So rather than just learning random skills, the skills you learn are actually organized in a way that increases job-readiness. And it’s no secret that version control is pretty much a requirement for any software-related job. </p>

<p>I’ve taken a couple of Github crash courses, and some other courses I’ve taken included at least one or two lessons on “gitting” started with Git, but I still always found myself completely lost when using version control. Not only that, but I learned syntax and commands, but not why I should do what. I didn’t know the difference between committing and pushing, nor when to commit. </p>

<p><a href="https://www.udacity.com/course/ud775">How to Use Git and Github</a> is a wonderful course that starts from ground up. Rather than immediately pushing students into the Github environment, it introduces Git as a software, and the first part of the course is dedicated to explaining what Git is, and how to use it. </p>

<p>I really liked that part because then I realized how many more applications Git could have other than software developemnt. For example, you could use it to keep track of important files locally, or you could “version control” a novel or something similar. </p>

<p>After that, the course delves into your very first Github repository, and then we get into collaboration with Github.</p>

<p>What made the course especially unique was the fact that we were required to do “reflections.” These were basically little thoughts that made us think about what we were actually learning, and why we were learning it, which I found incredibly effective. </p>

<p>You can read my reflections <a href="https://github.com/abustamam/reflections">here</a>. </p>

<p>All in all, I learned a lot from the course, and I recommend it to anyone who is new to Git(Hub).</p>

<h3 id="project-2-interactive-resume">Project 2: Interactive Resume</h3>

<p>The natural follow-up to learning HTML/CSS is JavaScript. HTML is how things are laid on the page, CSS is how things are shown on the page, and JavaScript makes all of that non-static. </p>

<p>I wouldn’t consider JavaScript a “beginner” language, since most “beginner” languages have the concept of classes, which JavaScript doesn’t technically have. Python seems to be the go-to beginner language, which is probably why it’s recommended to take the Python courses before moving on with the JavaScript course. </p>

<p>Regardless, the next project is the Interactive Resume. When I saw the project title “Interactive Resume,” I read it to be a resume that the user could interact with. Instead, it’s a normal resume whose content comes from JSON, which is fine, it just doesn’t seem very interactive. </p>

<p>All that aside, the course for this is <a href="https://www.udacity.com/course/viewer#!/c-ud804">JavaScript Basics</a>. </p>

<p>Out of the few courses I’ve completed at Udacity, JS Basics is probably the worst (even though it’s pretty good). All of the courses I’ve taken with Udacity have been pretty good thus far, but there has to be one worst, and JS Basics takes the cake. </p>

<p>Why? The course is confusing. We learn the project goal. And we begin constructing it. Then for no well-defined reason, we’re told to erase all the lines of code we wrote and start fresh.</p>

<p>I’m all for starting fresh, but then it goes from a blank slate to a half-full resume from one video to the next, and following along with the video would not result in the “this is how your site should look now” shown. I had to do a lot of things myself to make it look how it was supposed to, but nowhere that was mentioned. </p>

<p>Other than that caveat, the course is pretty good. It teaches the syntax and the basics of JSON, which is something that very few JS courses ever teach.</p>

<p>Though JS Basics is a good course, I would recommend Codecademy over Udacity for learning JavaScript Basics. Only after that would I take this course. </p>

<h2 id="wrap-up">Wrap-up</h2>

<p>That about wraps up my first couple weeks in the Nanodegree program. I’ll be back with another update once I finish my game project!</p>
]]></content>
  </entry>
  
</feed>
